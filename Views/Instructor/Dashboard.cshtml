@model PiranaSecuritySystem.Models.Instructor
@using PiranaSecuritySystem.Models

@{
    ViewBag.Title = "Instructor Dashboard";
    Layout = "~/Views/Shared/_Layout.cshtml";
}

<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>PIRANA GUARDING - Instructor Dashboard</title>
    <link href="https://cdn.jsdelivr.net/npm/bootstrap@5.3.0/dist/css/bootstrap.min.css" rel="stylesheet">
    <link rel="stylesheet" href="https://cdnjs.cloudflare.com/ajax/libs/font-awesome/6.4.0/css/all.min.css">
    <link href="https://fonts.googleapis.com/css2?family=Roboto:wght@300;400;500;700&display=swap" rel="stylesheet">
    <style>
        :root {
            --primary-blue: #0069aa;
            --secondary-blue: #004a7c;
            --accent-orange: #f26522;
            --light-bg: #f8f9fa;
            --dark-text: #333333;
            --light-text: #6c757d;
            --border-color: #dee2e6;
        }

        body {
            background-color: var(--light-bg);
            min-height: 100vh;
            font-family: 'Roboto', sans-serif;
            padding: 20px 0;
            color: var(--dark-text);
        }

        .dashboard-container {
            max-width: 1200px;
            margin: 0 auto;
        }

        .dashboard-card {
            background: white;
            border-radius: 8px;
            box-shadow: 0 2px 15px rgba(0, 0, 0, 0.08);
            overflow: hidden;
            margin-bottom: 25px;
            border: 1px solid var(--border-color);
        }

        .card-header-custom {
            background: white;
            color: var(--primary-blue);
            padding: 20px;
            border-bottom: 2px solid var(--primary-blue);
        }

        .stats-card {
            border-radius: 8px;
            overflow: hidden;
            border: none;
            box-shadow: 0 2px 10px rgba(0, 0, 0, 0.08);
        }

        .btn-custom {
            background: var(--primary-blue);
            border: none;
            padding: 12px 20px;
            border-radius: 4px;
            font-weight: 500;
            transition: all 0.3s;
            color: white;
        }

            .btn-custom:hover {
                background: var(--secondary-blue);
                color: white;
            }

        .btn-outline-custom {
            background: transparent;
            border: 1px solid var(--primary-blue);
            color: var(--primary-blue);
            padding: 10px 20px;
            border-radius: 4px;
            font-weight: 500;
            transition: all 0.3s;
        }

            .btn-outline-custom:hover {
                background: var(--primary-blue);
                color: white;
            }

        .alert-custom {
            border-radius: 4px;
            border: none;
            box-shadow: 0 2px 10px rgba(0, 0, 0, 0.08);
        }

        h2, h4, h5 {
            color: var(--primary-blue);
        }

        .welcome-section {
            background: #e8f4ff;
            border-radius: 8px;
            padding: 20px;
            margin-bottom: 25px;
            border-left: 4px solid var(--primary-blue);
        }

        /* Notification Styles */
        .notification-bell {
            position: relative;
            display: inline-block;
        }

        .notification-dropdown {
            position: absolute;
            top: 100%;
            right: 0;
            width: 400px;
            max-height: 500px;
            overflow-y: auto;
            background: white;
            border: 1px solid var(--border-color);
            border-radius: 4px;
            box-shadow: 0 2px 15px rgba(0, 0, 0, 0.1);
            z-index: 1050;
            display: none;
        }

        .notification-item {
            padding: 1rem;
            border-bottom: 1px solid #e9ecef;
            cursor: pointer;
            transition: all 0.2s ease;
        }

            .notification-item.unread {
                background-color: #f8f9fa;
                border-left: 4px solid var(--primary-blue);
            }

            .notification-item:hover {
                background-color: #e3f2fd;
            }

        .notification-content {
            position: relative;
        }

        .notification-title {
            font-weight: 600;
            margin-bottom: 0.25rem;
            color: #212529;
            font-size: 0.95rem;
        }

        .notification-message {
            margin-bottom: 0.5rem;
            color: #495057;
            font-size: 0.875rem;
        }

        .notification-time {
            font-size: 0.75rem;
            color: #6c757d;
        }

        .notification-type {
            position: absolute;
            top: 0;
            right: 0;
            font-size: 0.75rem;
            padding: 0.25rem 0.5rem;
            color: white;
            border-radius: 4px;
        }

        .notification-header {
            padding: 1rem;
            background-color: #f8f9fa;
            border-bottom: 1px solid #e9ecef;
            display: flex;
            justify-content: space-between;
            align-items: center;
            font-weight: 600;
        }

        .mark-all-read {
            font-size: 0.875rem;
            color: var(--primary-blue);
            text-decoration: none;
            cursor: pointer;
        }

            .mark-all-read:hover {
                text-decoration: underline;
            }

        .notification-footer {
            padding: 0.75rem;
            background-color: #f8f9fa;
            border-top: 1px solid #e9ecef;
            text-align: center;
        }

        /* Profile button styles */
        .profile-btn {
            background: var(--primary-blue);
            color: white;
            border: none;
            border-radius: 50%;
            width: 40px;
            height: 40px;
            display: flex;
            align-items: center;
            justify-content: center;
            transition: all 0.3s;
        }

            .profile-btn:hover {
                background: var(--secondary-blue);
            }

        /* Profile modal styles */
        .profile-modal .modal-content {
            border-radius: 8px;
            overflow: hidden;
        }

        .profile-modal .modal-header {
            background: var(--primary-blue);
            color: white;
        }

        .profile-image-container {
            width: 120px;
            height: 120px;
            border-radius: 50%;
            overflow: hidden;
            margin: 0 auto 20px;
            border: 4px solid #e9ecef;
            position: relative;
        }

        .profile-image {
            width: 100%;
            height: 100%;
            object-fit: cover;
        }

        .profile-image-overlay {
            position: absolute;
            bottom: 0;
            left: 0;
            right: 0;
            background-color: rgba(0,0,0,0.5);
            padding: 5px;
            text-align: center;
            color: white;
            font-size: 12px;
            opacity: 0;
            transition: opacity 0.3s;
        }

        .profile-image-container:hover .profile-image-overlay {
            opacity: 1;
        }

        .form-check-input:checked {
            background-color: var(--primary-blue);
            border-color: var(--primary-blue);
        }

        a {
            color: var(--primary-blue);
            text-decoration: none;
            font-weight: 500;
            transition: all 0.2s;
        }

            a:hover {
                color: var(--secondary-blue);
                text-decoration: underline;
            }

        .security-icon {
            text-align: center;
            margin-bottom: 15px;
            color: var(--primary-blue);
        }

            .security-icon i {
                font-size: 24px;
                background: #e8f4ff;
                padding: 15px;
                border-radius: 50%;
            }

        .instructor-details-table {
            width: 100%;
        }

            .instructor-details-table th {
                width: 40%;
                padding: 8px;
                vertical-align: top;
            }

            .instructor-details-table td {
                padding: 8px;
                vertical-align: top;
            }

        .badge-info {
            background-color: var(--primary-blue);
        }
    </style>
</head>
<body>
    <div class="dashboard-container">
        <!-- Page Header with Profile Button and Notification Bell -->
        <div class="d-flex justify-content-between align-items-center mb-4">
            <div class="d-flex align-items-center">
                <!-- Profile Button -->
                <button class="profile-btn me-3" data-bs-toggle="modal" data-bs-target="#profileModal">
                    <i class="fas fa-user"></i>
                </button>
                <div>
                    <h1 class="h3 mb-1">Instructor Dashboard</h1>
                    <p class="text-muted">Welcome to the instructor management system</p>
                </div>
            </div>

            <!-- Notification Bell -->
            <div class="notification-bell">
                <a href="#" id="instructorNotificationBell" class="btn btn-outline-primary position-relative">
                    <i class="fas fa-bell"></i>
                    @if (ViewBag.UnreadNotificationCount != null && (int)ViewBag.UnreadNotificationCount > 0)
                    {
                        <span class="position-absolute top-0 start-100 translate-middle badge rounded-pill bg-danger">
                            @ViewBag.UnreadNotificationCount
                            <span class="visually-hidden">unread notifications</span>
                        </span>
                    }
                </a>
                <div class="notification-dropdown" id="instructorNotificationDropdown">
                    <div class="notification-header">
                        <span class="fw-bold">All Notifications</span>
                        @if (ViewBag.UnreadNotificationCount != null && (int)ViewBag.UnreadNotificationCount > 0)
                        {
                            <a href="#" class="mark-all-read" id="markAllAsRead">Mark all as read</a>
                        }
                    </div>
                    <div id="instructorNotificationList">
                        @if (ViewBag.Notifications != null && ((List<Notification>)ViewBag.Notifications).Any())
                        {
                            foreach (var notification in ((List<Notification>)ViewBag.Notifications).Take(10))
                            {
                                <div class="notification-item @(notification.IsRead ? "" : "unread")"
                                     data-id="@notification.NotificationId"
                                     data-url="@Url.Action("NotificationDetails", "Instructor", new { id = notification.InstructorId })">
                                    <div class="notification-content">
                                        <div class="notification-title">@notification.Title</div>
                                        <div class="notification-message">@notification.Message</div>
                                        <div class="notification-time">@notification.CreatedAt.ToString("g")</div>
                                        @if (!string.IsNullOrEmpty(notification.NotificationType))
                                        {
                                            <span class="notification-type badge @GetNotificationTypeBadge(notification.NotificationType)">
                                                @notification.NotificationType
                                            </span>
                                        }
                                    </div>
                                </div>
                            }
                        }
                        else
                        {
                            <div class="notification-item text-center py-3">
                                <i class="fas fa-bell-slash text-muted me-2"></i>
                                No notifications
                            </div>
                        }
                        @if (ViewBag.Notifications != null && ((List<Notification>)ViewBag.Notifications).Count > 10)
                        {
                            <div class="notification-footer text-center py-2">
                                <a href="@Url.Action("Notifications", "Instructor")" class="text-primary">View all notifications</a>
                            </div>
                        }
                    </div>
                </div>
            </div>
        </div>

        <div class="row">
            <div class="col-md-12">
                <div class="dashboard-card">
                    <div class="card-header-custom">
                        <div class="d-flex justify-content-between align-items-center">
                            <h2 class="mb-0"><i class="fas fa-chalkboard-teacher me-2"></i>Instructor Dashboard</h2>
                            <div>
                                <span class="badge bg-light text-dark">
                                    <i class="fas fa-sync-alt me-1"></i>Last updated: @DateTime.Now.ToString("hh:mm tt")
                                </span>
                            </div>
                        </div>
                    </div>
                    <div class="card-body">
                        @if (TempData["SuccessMessage"] != null)
                        {
                            <div class="alert alert-success alert-custom">
                                <i class="fas fa-check-circle me-2"></i> @TempData["SuccessMessage"]
                            </div>
                        }

                        @if (TempData["ErrorMessage"] != null)
                        {
                            <div class="alert alert-danger alert-custom">
                                <i class="fas fa-exclamation-circle me-2"></i> @TempData["ErrorMessage"]
                            </div>
                        }

                        <div class="welcome-section">
                            <h4><i class="fas fa-user-tie me-2"></i>Welcome, @Model.FullName!</h4>
                            <p class="mb-0">You have successfully logged in to the Pirana Security System instructor portal.</p>
                        </div>

                        <!-- Instructor Profile and Training Management -->
                        <div class="row mb-4">
                            <div class="col-md-6 mb-3">
                                <div class="dashboard-card">
                                    <div class="card-header-custom">
                                        <h5 class="mb-0"><i class="fas fa-user-tie me-2"></i>My Instructor Profile</h5>
                                    </div>
                                    <div class="card-body">
                                        <table class="instructor-details-table">
                                            <tr>
                                                <th>Employee ID:</th>
                                                <td>@Model.EmployeeId</td>
                                            </tr>
                                            <tr>
                                                <th>Full Name:</th>
                                                <td>@Model.FullName</td>
                                            </tr>
                                            <tr>
                                                <th>Email:</th>
                                                <td>@Model.Email</td>
                                            </tr>
                                            <tr>
                                                <th>Phone:</th>
                                                <td>@(string.IsNullOrEmpty(Model.PhoneNumber) ? "Not provided" : Model.PhoneNumber)</td>
                                            </tr>
                                            <tr>
                                                <th>Specialization:</th>
                                                <td>
                                                    <span class="badge bg-primary">@Model.Specialization</span>
                                                </td>
                                            </tr>
                                            <tr>
                                                <th>Assigned Site:</th>
                                                <td>
                                                    @if (!string.IsNullOrEmpty(Model.Site))
                                                    {
                                                        <span class="badge bg-info">@Model.Site</span>
                                                    }
                                                    else
                                                    {
                                                        <span class="badge bg-secondary">Not Assigned</span>
                                                    }
                                                </td>
                                            </tr>
                                            <tr>
                                                <th>Status:</th>
                                                <td>
                                                    @if (Model.IsActive)
                                                    {
                                                        <span class="badge bg-success">Active</span>
                                                    }
                                                    else
                                                    {
                                                        <span class="badge bg-danger">Inactive</span>
                                                    }
                                                </td>
                                            </tr>
                                            <tr>
                                                <th>Date Registered:</th>
                                                <td>@Model.DateRegistered.ToString("MMM dd, yyyy")</td>
                                            </tr>
                                        </table>
                                    </div>
                                </div>
                            </div>
                            <div class="col-md-6 mb-3">
                                <div class="dashboard-card">
                                    <div class="card-header-custom">
                                        <h5 class="mb-0"><i class="fas fa-tasks me-2"></i>Training Management</h5>
                                    </div>
                                    <div class="card-body">
                                        <!-- Generate Shifts Button -->
                                        <a href="@Url.Action("Create", "ShiftRoster")" class="btn btn-custom btn-lg w-100 mb-3">
                                            <i class="fas fa-calendar-plus me-2"></i> Generate Shifts
                                        </a>

                                        <!-- View My Shifts -->
                                        <a href="@Url.Action("Index", "ShiftRoster")" class="btn btn-custom btn-lg w-100 mb-3">
                                            <i class="fas fa-calendar-alt me-2"></i> View My Shifts
                                        </a>

                                        <!-- Create Training Session -->
                                        <a href="@Url.Action("Index", "TrainingSessions")" class="btn btn-custom btn-lg w-100 mb-3">
                                            <i class="fas fa-plus-circle me-2"></i> Create Training Session
                                        </a>

                                        <!-- Assessment Results -->
                                        <a href="#" class="btn btn-custom btn-lg w-100">
                                            <i class="fas fa-chart-bar me-2"></i> Assessment Results
                                        </a>
                                    </div>
                                </div>
                            </div>
                        </div>

                        <!-- Upcoming Training Sessions -->
                        <div class="row mb-4">
                            <div class="col-md-12">
                                <div class="dashboard-card">
                                    <div class="card-header-custom">
                                        <h5 class="mb-0"><i class="fas fa-clock me-2"></i>Upcoming Training Sessions</h5>
                                    </div>
                                    <div class="card-body">
                                        <div id="upcomingSessionsPlaceholder">
                                            <p class="text-center text-muted py-4">
                                                <i class="fas fa-spinner fa-spin me-2"></i> Loading upcoming sessions...
                                            </p>
                                        </div>
                                    </div>
                                </div>
                            </div>
                        </div>
                    </div>
                </div>
            </div>
        </div>
    </div>

    <!-- Profile Modal -->
    <div class="modal fade profile-modal" id="profileModal" tabindex="-1" aria-labelledby="profileModalLabel" aria-hidden="true">
        <div class="modal-dialog modal-lg">
            <div class="modal-content">
                <div class="modal-header">
                    <h5 class="modal-title" id="profileModalLabel"><i class="fas fa-user-circle me-2"></i>Instructor Profile</h5>
                    <button type="button" class="btn-close" data-bs-dismiss="modal" aria-label="Close"></button>
                </div>
                <div class="modal-body">
                    <div class="text-center mb-4">
                        <div class="profile-image-container">
                            <img src="https://ui-avatars.com/api/?name=@Model.FullName&background=0069aa&color=fff&size=120" alt="Profile" class="profile-image" id="profileImage">
                            <div class="profile-image-overlay">
                                <i class="fas fa-camera"></i> Change Photo
                            </div>
                        </div>
                        <input type="file" id="profileImageUpload" accept="image/*" style="display: none;">
                        <h4 class="mt-2">@Model.FullName</h4>
                        <p class="text-muted">@Model.Specialization Instructor</p>
                    </div>

                    <form id="profileForm">
                        <div class="row">
                            <div class="col-md-6 mb-3">
                                <label for="firstName" class="form-label">First Name</label>
                                <input type="text" class="form-control" id="firstName" value="@Model.FullName.Split(' ')[0]" placeholder="Enter first name">
                            </div>
                            <div class="col-md-6 mb-3">
                                <label for="lastName" class="form-label">Last Name</label>
                                <input type="text" class="form-control" id="lastName" value="@(Model.FullName.Split(' ').Length > 1 ? Model.FullName.Split(' ')[1] : "")" placeholder="Enter last name">
                            </div>
                        </div>

                        <div class="mb-3">
                            <label for="email" class="form-label">Email Address</label>
                            <input type="email" class="form-control" id="email" value="@Model.Email" placeholder="Enter email address">
                        </div>

                        <div class="mb-3">
                            <label for="phone" class="form-label">Phone Number</label>
                            <input type="tel" class="form-control" id="phone" value="@(string.IsNullOrEmpty(Model.PhoneNumber) ? "" : Model.PhoneNumber)" placeholder="Enter phone number">
                        </div>

                        <div class="mb-3">
                            <label for="specialization" class="form-label">Specialization</label>
                            <input type="text" class="form-control" id="specialization" value="@Model.Specialization" disabled>
                        </div>

                        <div class="mb-3">
                            <label for="employeeId" class="form-label">Employee ID</label>
                            <input type="text" class="form-control" id="employeeId" value="@Model.EmployeeId" disabled>
                        </div>

                        <div class="mb-3">
                            <label for="site" class="form-label">Assigned Site</label>
                            <input type="text" class="form-control" id="site" value="@(string.IsNullOrEmpty(Model.Site) ? "Not Assigned" : Model.Site)" disabled>
                            <div class="form-text">Your assigned site is managed by the administration.</div>
                        </div>
                    </form>
                </div>
                <div class="modal-footer">
                    <button type="button" class="btn btn-secondary" data-bs-dismiss="modal">Cancel</button>
                    <button type="button" class="btn btn-custom" id="saveProfileBtn">Save Changes</button>
                </div>
            </div>
        </div>
    </div>

    <!-- Training Materials Modal -->
    <div class="modal fade" id="materialsModal" tabindex="-1" role="dialog" aria-hidden="true">
        <div class="modal-dialog modal-lg">
            <div class="modal-content">
                <div class="modal-header">
                    <h5 class="modal-title"><i class="fas fa-book me-2"></i>Training Materials</h5>
                    <button type="button" class="btn-close" data-bs-dismiss="modal" aria-label="Close"></button>
                </div>
                <div class="modal-body">
                    <div class="list-group">
                        <a href="#" class="list-group-item list-group-item-action">
                            <i class="fas fa-file-pdf text-danger me-2"></i> Firearm Safety Manual.pdf
                        </a>
                        <a href="#" class="list-group-item list-group-item-action">
                            <i class="fas fa-file-powerpoint text-warning me-2"></i> First Aid Presentation.pptx
                        </a>
                        <a href="#" class="list-group-item list-group-item-action">
                            <i class="fas fa-file-video text-primary me-2"></i> Defensive Tactics Demo.mp4
                        </a>
                        <a href="#" class="list-group-item list-group-item-action">
                            <i class="fas fa-file-word text-info me-2"></i> Surveillance Techniques Guide.docx
                        </a>
                        <a href="#" class="list-group-item list-group-item-action">
                            <i class="fas fa-file-excel text-success me-2"></i> Assessment Results.xlsx
                        </a>
                    </div>
                </div>
                <div class="modal-footer">
                    <button type="button" class="btn btn-secondary" data-bs-dismiss="modal">Close</button>
                    <button type="button" class="btn btn-custom">Upload New Material</button>
                </div>
            </div>
        </div>
    </div>

    <script src="https://code.jquery.com/jquery-3.6.0.min.js"></script>
    <script src="https://cdn.jsdelivr.net/npm/bootstrap@5.3.0/dist/js/bootstrap.bundle.min.js"></script>
    <script>
        $(document).ready(function () {
            console.log("Instructor dashboard loaded");

            // Auto-dismiss alerts after 5 seconds
            setTimeout(function () {
                $('.alert').fadeOut('slow');
            }, 5000);

            // Profile image upload functionality
            $('.profile-image-container').click(function() {
                $('#profileImageUpload').click();
            });

            $('#profileImageUpload').change(function(e) {
                if (e.target.files && e.target.files[0]) {
                    var reader = new FileReader();

                    reader.onload = function(e) {
                        $('#profileImage').attr('src', e.target.result);
                    }

                    reader.readAsDataURL(e.target.files[0]);
                }
            });

            // Save profile changes
            $('#saveProfileBtn').click(function() {
                // Get form values
                var firstName = $('#firstName').val();
                var lastName = $('#lastName').val();
                var email = $('#email').val();
                var phone = $('#phone').val();

                // Validate required fields
                if (!firstName || !lastName || !email) {
                    alert('Please fill in all required fields: First Name, Last Name, and Email');
                    return;
                }

                // Validate email format
                var emailRegex = /^[^\s@@]+@@[^\s@@]+\.[^\s@@]+$/;
                if (!emailRegex.test(email)) {
                    alert('Please enter a valid email address');
                    return;
                }

                // In a real application, you would send this data to the server
                // For this example, we'll just show a success message
                alert('Profile updated successfully!');

                // Close the modal
                $('#profileModal').modal('hide');
            });

            // Notification bell functionality
            $('#instructorNotificationBell').click(function (e) {
                e.preventDefault();
                e.stopPropagation();
                $('#instructorNotificationDropdown').toggle();
                loadInstructorNotifications();
            });

            // Close dropdown when clicking outside
            $(document).click(function (e) {
                if (!$(e.target).closest('.notification-bell').length) {
                    $('#instructorNotificationDropdown').hide();
                }
            });

            // Mark notification as read and navigate when clicked
            $(document).on('click', '.notification-item', function (e) {
                e.preventDefault();
                var notificationId = $(this).data('id');
                var url = $(this).data('url');

                if (notificationId) {
                    markNotificationAsRead(notificationId);
                    $(this).removeClass('unread');

                    // Navigate to related URL if available
                    if (url && url !== '#') {
                        window.location.href = url;
                    }
                }
            });

            // Mark all as read
            $('#markAllAsRead').click(function (e) {
                e.preventDefault();
                e.stopPropagation();
                markAllNotificationsAsRead();
            });

            // Auto-refresh notifications every 30 seconds
            setInterval(loadInstructorNotifications, 30000);

            // Load notifications function
            function loadInstructorNotifications() {
                $.get('@Url.Action("GetNotifications", "Instructor")', function (data) {
                    if (data.error) {
                        console.error('Error loading notifications:', data.error);
                        return;
                    }

                    updateNotificationUI(data);
                }).fail(function(xhr, status, error) {
                    console.error('Failed to load notifications:', error);
                });
            }

            function updateNotificationUI(data) {
                var notificationList = $('#instructorNotificationList');
                notificationList.empty();

                if (data.notifications && data.notifications.length > 0) {
                    $.each(data.notifications, function (index, notification) {
                        var item = $('<div>').addClass('notification-item ' + (notification.IsRead ? '' : 'unread'))
                            .attr('data-id', notification.Id)
                            .attr('data-url', notification.RelatedUrl || '#')
                            .html('<div class="notification-content">' +
                                  '<div class="notification-title">' + (notification.Title || 'Notification') + '</div>' +
                                  '<div class="notification-message">' + notification.Message + '</div>' +
                                  '<div class="notification-time">' +
                                  new Date(notification.CreatedAt).toLocaleString() + '</div>' +
                                  (notification.Type ?
                                  '<span class="notification-type badge ' + getNotificationTypeClass(notification.Type) + '">' +
                                  notification.Type + '</span>' : '') +
                                  '</div>');

                        notificationList.append(item);
                    });

                    // Add view all link if there are more than 10 notifications
                    if (data.notifications.length > 10) {
                        notificationList.append('<div class="notification-footer text-center py-2">' +
                            '<a href="@Url.Action("Notifications", "Instructor")" class="text-primary">View all notifications</a></div>');
                    }
                } else {
                    notificationList.append('<div class="notification-item text-center py-3">' +
                        '<i class="fas fa-bell-slash text-muted me-2"></i>No notifications</div>');
                }

                // Update notification count
                updateNotificationCount(data.unreadCount || 0);
            }

            function getNotificationTypeClass(type) {
                switch (type.toLowerCase()) {
                    case 'login': return 'bg-success';
                    case 'training': return 'bg-info';
                    case 'system': return 'bg-secondary';
                    case 'security': return 'bg-warning';
                    case 'guard': return 'bg-primary';
                    case 'schedule': return 'bg-purple';
                    case 'assessment': return 'bg-teal';
                    default: return 'bg-secondary';
                }
            }

            function updateNotificationCount(count) {
                var badge = $('#instructorNotificationBell .badge');
                var markAllLink = $('#markAllAsRead');

                if (count > 0) {
                    badge.text(count).show();
                    markAllLink.show();
                } else {
                    badge.hide();
                    markAllLink.hide();
                }
            }

            function markNotificationAsRead(notificationId) {
                $.post('@Url.Action("MarkNotificationAsRead", "Instructor")', { id: notificationId })
                    .done(function(response) {
                        if (response.success) {
                            // Update unread count
                            var currentCount = parseInt($('#instructorNotificationBell .badge').text()) || 0;
                            if (currentCount > 0) {
                                updateNotificationCount(currentCount - 1);
                            }
                        }
                    })
                    .fail(function() {
                        console.error('Failed to mark notification as read');
                    });
            }

            function markAllNotificationsAsRead() {
                $.post('@Url.Action("MarkAllNotificationsAsRead", "Instructor")')
                    .done(function(response) {
                        if (response.success) {
                            $('.notification-item').removeClass('unread');
                            updateNotificationCount(0);
                            $('#instructorNotificationDropdown').hide();
                        }
                    })
                    .fail(function() {
                        console.error('Failed to mark all notifications as read');
                    });
            }

            // Initial load of notifications
            loadInstructorNotifications();

            // Load upcoming training sessions
            function loadUpcomingSessions() {
                $.get('@Url.Action("GetUpcomingSessions", "Instructor")', function (data) {
                    if (data.error) {
                        console.error('Error loading upcoming sessions:', data.error);
                        return;
                    }

                    updateUpcomingSessionsUI(data);
                }).fail(function(xhr, status, error) {
                    console.error('Failed to load upcoming sessions:', error);
                });
            }

            function updateUpcomingSessionsUI(data) {
                var placeholder = $('#upcomingSessionsPlaceholder');

                if (data.sessions && data.sessions.length > 0) {
                    var html = '<div class="table-responsive"><table class="table table-hover">';
                    html += '<thead class="thead-light"><tr><th>Date</th><th>Time</th><th>Course</th><th>Location</th><th>Participants</th><th>Status</th></tr></thead>';
                    html += '<tbody>';

                    // Loop through sessions and build rows
                    $.each(data.sessions, function (index, session) {
                        html += '<tr>' +
                            '<td>' + new Date(session.Date).toLocaleDateString() + '</td>' +
                            '<td>' + session.Time + '</td>' +
                            '<td>' + session.CourseName + '</td>' +
                            '<td>' + session.Location + '</td>' +
                            '<td>' + session.ParticipantsCount + '/' + session.MaxParticipants + '</td>' +
                            '<td><span class="badge bg-' + getStatusClass(session.Status) + '">' + session.Status + '</span></td>' +
                        '</tr>';
                    });

                    html += '</tbody></table></div>';
                    placeholder.html(html);
                } else {
                    placeholder.html('<p class="text-center text-muted py-4">No upcoming training sessions</p>');
                }
            }

            function getStatusClass(status) {
                switch (status.toLowerCase()) {
                    case 'scheduled': return 'info';
                    case 'completed': return 'success';
                    case 'cancelled': return 'danger';
                    case 'in progress': return 'warning';
                    default: return 'secondary';
                }
            }

            // Load upcoming sessions
            loadUpcomingSessions();

            // Refresh dashboard every 5 minutes to get updated stats
            setInterval(function () {
                console.log("Refreshing dashboard statistics...");
                window.location.reload();
            }, 300000); // 5 minutes
        });
    </script>
</body>
</html>

@functions {
    public string GetNotificationTypeBadge(string type)
    {
        switch (type?.ToLower())
        {
            case "login":
                return "bg-success";
            case "training":
                return "bg-info";
            case "system":
                return "bg-secondary";
            case "security":
                return "bg-warning";
            case "guard":
                return "bg-primary";
            case "schedule":
                return "bg-purple";
            case "assessment":
                return "bg-teal";
            default:
                return "bg-secondary";
        }
    }
}