@model PiranaSecuritySystem.Controllers.ReportIncidentViewModel

@{
    ViewBag.Title = "Report Incident";
    Layout = "~/Views/Shared/_Layout.cshtml";
}

<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Report Incident - PIRANA GUARDING</title>
    <link href="https://cdn.jsdelivr.net/npm/bootstrap@5.3.0/dist/css/bootstrap.min.css" rel="stylesheet">
    <link rel="stylesheet" href="https://cdnjs.cloudflare.com/ajax/libs/font-awesome/6.4.0/css/all.min.css">
    <link href="https://fonts.googleapis.com/css2?family=Roboto:wght@300;400;500;700&display=swap" rel="stylesheet">
    <style>
        :root {
            --primary-blue: #0069aa;
            --secondary-blue: #004a7c;
            --accent-orange: #f26522;
            --light-bg: #f8f9fa;
            --dark-text: #333333;
            --light-text: #6c757d;
            --border-color: #dee2e6;
        }

        body {
            background-color: var(--light-bg);
            font-family: 'Roboto', sans-serif;
            color: var(--dark-text);
            padding: 20px;
            min-height: 100vh;
            display: flex;
            flex-direction: column;
            justify-content: center;
        }

        .login-container {
            max-width: 600px;
            width: 100%;
            margin: 0 auto;
        }

        .login-card {
            background: white;
            border-radius: 8px;
            box-shadow: 0 2px 15px rgba(0, 0, 0, 0.08);
            overflow: hidden;
            border: 1px solid var(--border-color);
        }

        .card-header {
            background: white;
            color: var(--primary-blue);
            text-align: center;
            padding: 25px 20px;
            border-bottom: 2px solid var(--primary-blue);
        }

        .card-body {
            padding: 30px;
        }

        .logo {
            font-size: 28px;
            font-weight: 700;
            margin-bottom: 5px;
            color: var(--primary-blue);
        }

        .subtitle {
            font-size: 14px;
            color: var(--light-text);
            font-weight: 400;
        }

        .form-control {
            padding: 12px 15px;
            border-radius: 4px;
            border: 1px solid var(--border-color);
            transition: all 0.3s;
            font-size: 15px;
        }

            .form-control:focus {
                border-color: var(--primary-blue);
                box-shadow: 0 0 0 0.2rem rgba(0, 105, 170, 0.15);
            }

        .btn-primary {
            background: var(--primary-blue);
            border: none;
            padding: 12px;
            border-radius: 4px;
            font-weight: 500;
            transition: all 0.3s;
            font-size: 16px;
        }

            .btn-primary:hover {
                background: var(--secondary-blue);
            }

        .btn-secondary {
            background: transparent;
            border: 1px solid var(--primary-blue);
            color: var(--primary-blue);
            padding: 10px 20px;
            border-radius: 4px;
            font-weight: 500;
            transition: all 0.3s;
            font-size: 14px;
        }

            .btn-secondary:hover {
                background: var(--primary-blue);
                color: white;
            }

        .floating-label {
            position: relative;
            margin-bottom: 20px;
        }

            .floating-label label {
                position: absolute;
                top: -10px;
                left: 10px;
                font-size: 12px;
                color: var(--primary-blue);
                font-weight: 500;
                background: white;
                padding: 0 5px;
                z-index: 1;
            }

            .floating-label select,
            .floating-label textarea,
            .floating-label input {
                padding: 12px 15px;
                position: relative;
                z-index: 2;
            }

        .welcome-text {
            text-align: center;
            margin-bottom: 20px;
            color: var(--light-text);
            font-size: 15px;
            font-weight: 400;
        }

        .alert {
            padding: 10px 15px;
            margin-bottom: 15px;
            border-radius: 4px;
            font-size: 14px;
        }

        .alert-danger {
            background-color: #f8d7da;
            color: #721c24;
            border: 1px solid #f5c6cb;
        }

        .alert-success {
            background-color: #d4edda;
            color: #155724;
            border: 1px solid #c3e6cb;
        }

        .security-icon {
            text-align: center;
            margin-bottom: 15px;
            color: var(--primary-blue);
        }

            .security-icon i {
                font-size: 24px;
                background: #e8f4ff;
                padding: 15px;
                border-radius: 50%;
            }

        .form-check-input:checked {
            background-color: var(--primary-blue);
            border-color: var(--primary-blue);
        }

        .back-link {
            display: inline-block;
            margin-bottom: 20px;
            color: var(--primary-blue);
            text-decoration: none;
        }

            .back-link:hover {
                color: var(--secondary-blue);
                text-decoration: underline;
            }

        .field-validation-error {
            color: #dc3545;
            font-size: 14px;
            display: block;
            margin-top: 5px;
        }

        .input-validation-error {
            border-color: #dc3545;
        }

        .validation-summary-errors {
            color: #dc3545;
            background-color: #f8d7da;
            border: 1px solid #f5c6cb;
            padding: 10px;
            border-radius: 4px;
            margin-bottom: 15px;
        }

            .validation-summary-errors ul {
                margin-bottom: 0;
                padding-left: 20px;
            }

        .character-count {
            text-align: right;
            color: var(--light-text);
            font-size: 0.9rem;
            margin-top: 5px;
        }

        .character-count-warning {
            color: #dc3545;
        }

        /* Fixed select styling to prevent text overlap */
        select.form-control {
            appearance: none;
            -webkit-appearance: none;
            -moz-appearance: none;
            background-image: url("data:image/svg+xml;charset=US-ASCII,<svg xmlns='http://www.w3.org/2000/svg' viewBox='0 0 4 5'><path fill='%23333' d='M2 0L0 2h4zm0 5L0 3h4z'/></svg>");
            background-repeat: no-repeat;
            background-position: right 15px center;
            background-size: 12px;
            padding-right: 35px;
        }

        /* Ensure labels are always visible and properly positioned */
        .form-group {
            position: relative;
            margin-bottom: 25px;
        }

            .form-group label {
                display: block;
                margin-bottom: 8px;
                font-weight: 600;
                color: var(--primary-blue);
                font-size: 1rem;
            }
    </style>
</head>
<body>
    <div class="login-container">
        <a href="@Url.Action("MyIncidents", "Resident")" class="back-link">
            <i class="fas fa-arrow-left me-2"></i>Back to My Incidents
        </a>

        <div class="login-card">
            <div class="card-header">
                <div class="logo">PIRANA GUARDING</div>
                <p class="subtitle mb-0">Resident Incident Reporting Portal</p>
            </div>
            <div class="card-body">
                <div class="security-icon">
                    <i class="fas fa-exclamation-circle"></i>
                </div>
                <h4 class="text-center mb-3" style="color: var(--primary-blue); font-weight: 600;">Report Incident</h4>
                <p class="welcome-text">Fill out the form below to report a security incident</p>

                <!-- Display error/success messages -->
                @if (TempData["ErrorMessage"] != null)
                {
                    <div class="alert alert-danger">
                        <strong>Error:</strong> @TempData["ErrorMessage"]
                    </div>
                }
                @if (TempData["SuccessMessage"] != null)
                {
                    <div class="alert alert-success">
                        @TempData["SuccessMessage"]
                    </div>
                }

                @using (Html.BeginForm("ReportIncident", "Resident", FormMethod.Post, new { @id = "incidentForm" }))
                {
                    @Html.AntiForgeryToken()
                    @Html.HiddenFor(model => model.ResidentId)

                    <!-- Show validation summary at the top -->
                    @Html.ValidationSummary(true, "", new { @class = "alert alert-danger validation-summary-errors" })

                    <div class="form-group">
                        <label for="IncidentType">Incident Type *</label>
                        @Html.DropDownListFor(model => model.IncidentType, new SelectList(new[]
                        {
                            "Suspicious Activity", "Break-in Attempt", "Theft", "Vandalism",
                            "Noise Complaint", "Parking Violation", "Fire Hazard", "Water Leak",
                            "Electrical Issue", "Other"
                        }), "Select Incident Type", new { @class = "form-control", required = "required" })
                        @Html.ValidationMessageFor(model => model.IncidentType, "", new { @class = "field-validation-error" })
                    </div>

                    <div class="form-group">
                        <label for="Priority">Priority Level *</label>
                        @Html.DropDownListFor(model => model.Priority, new SelectList(new[]
                        {
                            "Low", "Medium", "High", "Critical"
                        }), "Select Priority Level", new { @class = "form-control", required = "required" })
                        @Html.ValidationMessageFor(model => model.Priority, "", new { @class = "field-validation-error" })
                    </div>

                    <div class="form-group">
                        <label for="Description">Incident Description *</label>
                        @Html.TextAreaFor(model => model.Description, new { @class = "form-control", rows = "4", required = "required", maxlength = "1000", placeholder = "Please describe the incident in detail..." })
                        <div class="character-count">
                            <span id="charCount">0</span> / 1000 characters
                        </div>
                        @Html.ValidationMessageFor(model => model.Description, "", new { @class = "field-validation-error" })
                    </div>

                    <div class="form-group">
                        <label for="Location">Location *</label>
                        @Html.DropDownListFor(model => model.Location, ViewBag.Locations as IEnumerable<SelectListItem>, "Select Location", new { @class = "form-control", required = "required" })
                        @Html.ValidationMessageFor(model => model.Location, "", new { @class = "field-validation-error" })
                    </div>

                    <div class="form-group">
                        <label for="EmergencyContact">Emergency Contact *</label>
                        @Html.TextBoxFor(model => model.EmergencyContact, new { @class = "form-control", required = "required", type = "tel", placeholder = "Enter your emergency contact number" })
                        @Html.ValidationMessageFor(model => model.EmergencyContact, "", new { @class = "field-validation-error" })
                    </div>

                    <div class="row mt-4">
                        <div class="col-md-6">
                            <a href="@Url.Action("MyIncidents", "Resident")" class="btn btn-secondary w-100">
                                <i class="fas fa-times me-2"></i>Cancel
                            </a>
                        </div>
                        <div class="col-md-6">
                            <button type="submit" class="btn btn-primary w-100" id="submitBtn">
                                <i class="fas fa-paper-plane me-2"></i>Submit Report
                            </button>
                        </div>
                    </div>
                }
            </div>
        </div>
    </div>

    <script>
        document.addEventListener('DOMContentLoaded', function () {
            const incidentForm = document.getElementById('incidentForm');

            // Character count for description
            function updateCharacterCount() {
                var currentLength = document.getElementById('Description').value.length;
                document.getElementById('charCount').textContent = currentLength;

                if (currentLength > 900) {
                    document.getElementById('charCount').classList.add('character-count-warning');
                } else {
                    document.getElementById('charCount').classList.remove('character-count-warning');
                }
            }

            document.getElementById('Description').addEventListener('input', updateCharacterCount);
            updateCharacterCount(); // Initial count

            // Form validation
            incidentForm.addEventListener('submit', function (e) {
                const incidentType = document.getElementById('IncidentType').value;
                const priority = document.getElementById('Priority').value;
                const description = document.getElementById('Description').value;
                const location = document.getElementById('Location').value;
                const emergencyContact = document.getElementById('EmergencyContact').value;

                if (!incidentType || incidentType === "Select Incident Type" ||
                    !priority || priority === "Select Priority Level" ||
                    !description.trim() ||
                    !location || location === "Select Location" ||
                    !emergencyContact.trim()) {
                    e.preventDefault();

                    // Highlight empty fields
                    const fields = [
                        { id: 'IncidentType', value: incidentType },
                        { id: 'Priority', value: priority },
                        { id: 'Description', value: description },
                        { id: 'Location', value: location },
                        { id: 'EmergencyContact', value: emergencyContact }
                    ];

                    fields.forEach(field => {
                        const element = document.getElementById(field.id);
                        if (!field.value || (field.id !== 'Description' && field.id !== 'EmergencyContact' && field.value.includes('Select'))) {
                            element.classList.add('input-validation-error');
                        } else {
                            element.classList.remove('input-validation-error');
                        }
                    });

                    alert('Please fill in all required fields (marked with *)');
                    return;
                }

                // Show loading state
                document.getElementById('submitBtn').disabled = true;
                document.getElementById('submitBtn').innerHTML = '<i class="fas fa-spinner fa-spin me-2"></i>Submitting...';
            });

            // Clear validation errors when user starts typing
            const inputs = document.querySelectorAll('select, textarea, input');
            inputs.forEach(input => {
                input.addEventListener('input', function () {
                    this.classList.remove('input-validation-error');
                });
            });

            // Auto-format phone number
            document.getElementById('EmergencyContact').addEventListener('input', function () {
                var value = this.value.replace(/\D/g, '');
                if (value.length > 10) {
                    value = value.substring(0, 10);
                }
                this.value = value;
            });

            // Auto-hide alerts after 5 seconds
            setTimeout(function () {
                const alerts = document.querySelectorAll('.alert');
                alerts.forEach(alert => {
                    alert.style.transition = 'opacity 1s';
                    alert.style.opacity = '0';
                    setTimeout(() => alert.remove(), 1000);
                });
            }, 5000);

            // Click to dismiss alerts
            document.addEventListener('click', function (e) {
                if (e.target.closest('.alert')) {
                    const alert = e.target.closest('.alert');
                    alert.style.transition = 'opacity 0.3s';
                    alert.style.opacity = '0';
                    setTimeout(() => alert.remove(), 300);
                }
            });
        });
    </script>
</body>
</html>