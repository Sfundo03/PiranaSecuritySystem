@model PiranaSecuritySystem.Controllers.ReportIncidentViewModel

@{
    ViewBag.Title = "Report Incident";
    Layout = "~/Views/Shared/_Layout.cshtml";
    ViewBag.FullPageLayout = true;
}

<style>
    html, body {
        height: 100%;
        margin: 0;
        padding: 0;
    }

    .report-incident-container {
        min-height: 100vh;
        background: linear-gradient(135deg, #2c3e50 0%, #34495e 100%);
        color: white;
        padding: 20px;
    }

    .form-container {
        max-width: 800px;
        margin: 0 auto;
        padding: 30px;
    }

    .form-header {
        text-align: center;
        margin-bottom: 30px;
    }

        .form-header h2 {
            font-size: 2.5rem;
            margin-bottom: 10px;
            color: #3498db;
        }

        .form-header p {
            opacity: 0.9;
            font-size: 1.1rem;
        }

    .form-card {
        background: rgba(255, 255, 255, 0.1);
        border-radius: 10px;
        padding: 30px;
        backdrop-filter: blur(10px);
    }

    .form-group {
        margin-bottom: 25px;
    }

        .form-group label {
            display: block;
            margin-bottom: 8px;
            font-weight: 600;
            color: #3498db;
            font-size: 1.1rem;
        }

    .form-control {
        width: 100%;
        padding: 15px;
        border: 2px solid rgba(255, 255, 255, 0.2);
        border-radius: 8px;
        background: rgba(255, 255, 255, 0.9);
        color: #2c3e50;
        font-size: 1rem;
        transition: border-color 0.3s ease;
    }

        .form-control:focus {
            outline: none;
            border-color: #3498db;
            background: rgba(255, 255, 255, 1);
        }

    textarea.form-control {
        min-height: 120px;
        resize: vertical;
    }

    select.form-control {
        height: 50px;
    }

    .btn-primary {
        background: #e74c3c;
        color: white;
        padding: 15px 30px;
        border: none;
        border-radius: 8px;
        font-size: 1.1rem;
        cursor: pointer;
        width: 100%;
        margin-bottom: 20px;
        transition: background 0.3s ease;
    }

        .btn-primary:hover {
            background: #c0392b;
        }

    .btn-secondary {
        background: #7f8c8d;
        color: white;
        padding: 15px 30px;
        border: none;
        border-radius: 8px;
        font-size: 1.1rem;
        cursor: pointer;
        width: 100%;
        text-decoration: none;
        display: block;
        text-align: center;
        transition: background 0.3s ease;
    }

        .btn-secondary:hover {
            background: #636e72;
            color: white;
            text-decoration: none;
        }

    .field-validation-error {
        color: #e74c3c;
        font-size: 0.9rem;
        margin-top: 5px;
        display: block;
    }

    .input-validation-error {
        border-color: #e74c3c !important;
        background: rgba(231, 76, 60, 0.1) !important;
    }

    .navigation-header {
        background: rgba(255, 255, 255, 0.1);
        padding: 15px 20px;
        border-radius: 8px;
        margin-bottom: 30px;
        display: flex;
        justify-content: space-between;
        align-items: center;
    }

    .back-button {
        background: #3498db;
        color: white;
        padding: 10px 20px;
        border: none;
        border-radius: 5px;
        text-decoration: none;
        display: inline-flex;
        align-items: center;
        transition: background 0.3s ease;
    }

        .back-button:hover {
            background: #2980b9;
            color: white;
            text-decoration: none;
        }

        .back-button i {
            margin-right: 8px;
        }

    .alert {
        padding: 15px;
        border-radius: 8px;
        margin-bottom: 20px;
    }

    .alert-danger {
        background: rgba(231, 76, 60, 0.2);
        border: 1px solid #e74c3c;
        color: #e74c3c;
    }

    .alert-success {
        background: rgba(46, 204, 113, 0.2);
        border: 1px solid #2ecc71;
        color: #2ecc71;
    }

    .form-row {
        display: grid;
        grid-template-columns: 1fr 1fr;
        gap: 20px;
        margin-bottom: 25px;
    }

    .character-count {
        text-align: right;
        color: #7f8c8d;
        font-size: 0.9rem;
        margin-top: 5px;
    }

    .character-count-warning {
        color: #e74c3c;
    }

    @@media (max-width: 768px) {
        .form-row {
            grid-template-columns: 1fr;
        }

        .form-container {
            padding: 20px;
        }

        .form-header h2 {
            font-size: 2rem;
        }
    }
</style>

<div class="report-incident-container">
    <div class="form-container">
        <!-- Navigation Header -->
        <div class="navigation-header">
            <a href="@Url.Action("MyIncidents", "Resident")" class="back-button">
                <i class="fas fa-arrow-left"></i> Back to My Incidents
            </a>
            <h3 style="margin: 0; color: #3498db;">Report Security Incident</h3>
        </div>

        <div class="form-header">
            <h2>Report New Incident</h2>
            <p>Please provide details about the security incident you want to report</p>
        </div>

        @if (TempData["ErrorMessage"] != null)
        {
            <div class="alert alert-danger">
                <i class="fas fa-exclamation-circle"></i> @TempData["ErrorMessage"]
            </div>
        }

        @if (TempData["SuccessMessage"] != null)
        {
            <div class="alert alert-success">
                <i class="fas fa-check-circle"></i> @TempData["SuccessMessage"]
            </div>
        }

        <div class="form-card">
            @using (Html.BeginForm("ReportIncident", "Resident", FormMethod.Post, new { id = "incidentForm" }))
            {
                @Html.AntiForgeryToken()
                @Html.HiddenFor(model => model.ResidentId)

                <div class="form-row">
                    <div class="form-group">
                        @Html.LabelFor(model => model.IncidentType)
                        @Html.DropDownListFor(model => model.IncidentType, new SelectList(new[]
                        {
                            "Suspicious Activity", "Break-in Attempt", "Theft", "Vandalism",
                            "Noise Complaint", "Parking Violation", "Fire Hazard", "Water Leak",
                            "Electrical Issue", "Other"
                        }), "Select Incident Type", new { @class = "form-control", required = "required" })
                        @Html.ValidationMessageFor(model => model.IncidentType)
                    </div>

                    <div class="form-group">
                        @Html.LabelFor(model => model.Priority)
                        @Html.DropDownListFor(model => model.Priority, new SelectList(new[]
                        {
                            "Low", "Medium", "High", "Critical"
                        }), "Select Priority Level", new { @class = "form-control", required = "required" })
                        @Html.ValidationMessageFor(model => model.Priority)
                    </div>
                </div>

                <div class="form-group">
                    @Html.LabelFor(model => model.Description)
                    @Html.TextAreaFor(model => model.Description, new { @class = "form-control", rows = 6, required = "required", placeholder = "Please describe the incident in detail including date, time, people involved, and any other relevant information...", maxlength = "1000" })
                    <div class="character-count">
                        <span id="charCount">0</span> / 1000 characters
                    </div>
                    @Html.ValidationMessageFor(model => model.Description)
                </div>

                <div class="form-row">
                    <div class="form-group">
                        @Html.LabelFor(model => model.Location)
                        @Html.DropDownListFor(model => model.Location, ViewBag.Locations as IEnumerable<SelectListItem>, "Select Location", new { @class = "form-control", required = "required" })
                        @Html.ValidationMessageFor(model => model.Location)
                    </div>

                    <div class="form-group">
                        @Html.LabelFor(model => model.EmergencyContact)
                        @Html.TextBoxFor(model => model.EmergencyContact, new { @class = "form-control", required = "required", placeholder = "Your emergency contact number", type = "tel" })
                        @Html.ValidationMessageFor(model => model.EmergencyContact)
                    </div>
                </div>

                <button type="submit" class="btn-primary" id="submitBtn">
                    <i class="fas fa-paper-plane"></i> Submit Incident Report
                </button>
            }

            <a href="@Url.Action("MyIncidents", "Resident")" class="btn-secondary">
                <i class="fas fa-times"></i> Cancel
            </a>
        </div>
    </div>
</div>

@section scripts {
    <script>
        $(document).ready(function () {
            // Character count for description
            function updateCharacterCount() {
                var currentLength = $('#Description').val().length;
                $('#charCount').text(currentLength);

                if (currentLength > 900) {
                    $('#charCount').addClass('character-count-warning');
                } else {
                    $('#charCount').removeClass('character-count-warning');
                }
            }

            $('#Description').on('input', updateCharacterCount);
            updateCharacterCount(); // Initial count

            // Form validation and submission
            $('#incidentForm').submit(function (e) {
                var isValid = true;

                // Clear previous errors
                $('.input-validation-error').removeClass('input-validation-error');
                $('.field-validation-error').hide();

                // Validate required fields
                $('select[required], textarea[required], input[required]').each(function () {
                    if ($(this).val() === '' || $(this).val() === null) {
                        $(this).addClass('input-validation-error');
                        isValid = false;
                    }
                });

                if (!isValid) {
                    e.preventDefault();
                    showMessage('Please fill in all required fields.', 'error');
                    return false;
                }

                // Show loading state
                $('#submitBtn').prop('disabled', true).html('<i class="fas fa-spinner fa-spin"></i> Submitting...');
            });

            // Remove validation error on change
            $('select, textarea, input').change(function () {
                if ($(this).val() !== '') {
                    $(this).removeClass('input-validation-error');
                }
            });

            // Auto-format phone number
            $('#EmergencyContact').on('input', function () {
                var value = $(this).val().replace(/\D/g, '');
                if (value.length > 10) {
                    value = value.substring(0, 10);
                }
                $(this).val(value);
            });

            // Auto-hide alerts after 5 seconds
            setTimeout(function () {
                $('.alert').fadeOut(1000, function () {
                    $(this).remove();
                });
            }, 5000);

            // Click to dismiss alerts
            $('.alert').click(function () {
                $(this).fadeOut(300, function () {
                    $(this).remove();
                });
            });

            function showMessage(message, type) {
                var alertClass = type === 'error' ? 'alert-danger' : 'alert-success';
                var icon = type === 'error' ? 'fa-exclamation-circle' : 'fa-check-circle';

                $('.alert').remove(); // Remove existing alerts

                var alertHtml = '<div class="alert ' + alertClass + '">' +
                    '<i class="fas ' + icon + '"></i> ' + message +
                    '</div>';

                $('.form-header').after(alertHtml);
            }
        });
    </script>
}