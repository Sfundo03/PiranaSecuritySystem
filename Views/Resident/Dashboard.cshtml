@model PiranaSecuritySystem.Controllers.ResidentDashboardViewModel

@{
    ViewBag.Title = "Resident Dashboard";
    Layout = "~/Views/Shared/_Layout.cshtml";
    ViewBag.FullPageLayout = true;

    // Get notifications from ViewModel
    var notifications = Model.Notifications ?? new List<PiranaSecuritySystem.Models.Notification>();
    var unreadCount = notifications.Count(n => !n.IsRead);
}

<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>PIRANA GUARDING - Resident Dashboard</title>
    <link href="https://cdn.jsdelivr.net/npm/bootstrap@5.3.0/dist/css/bootstrap.min.css" rel="stylesheet">
    <link rel="stylesheet" href="https://cdnjs.cloudflare.com/ajax/libs/font-awesome/6.4.0/css/all.min.css">
    <link href="https://fonts.googleapis.com/css2?family=Roboto:wght@300;400;500;700&display=swap" rel="stylesheet">
    <style>
        :root {
            --primary-blue: #0069aa;
            --secondary-blue: #004a7c;
            --accent-orange: #f26522;
            --light-bg: #f8f9fa;
            --dark-text: #333333;
            --light-text: #6c757d;
            --border-color: #dee2e6;
        }

        body {
            background-color: var(--light-bg);
            min-height: 100vh;
            font-family: 'Roboto', sans-serif;
            padding: 20px 0;
            color: var(--dark-text);
        }

        .dashboard-container {
            max-width: 900px;
            margin: 0 auto;
        }

        .dashboard-card {
            background: white;
            border-radius: 8px;
            box-shadow: 0 2px 15px rgba(0, 0, 0, 0.08);
            overflow: hidden;
            margin-bottom: 25px;
            border: 1px solid var(--border-color);
        }

        .card-header-custom {
            background: white;
            color: var(--primary-blue);
            padding: 20px;
            border-bottom: 2px solid var(--primary-blue);
        }

        .stats-card {
            border-radius: 8px;
            overflow: hidden;
            border: none;
            box-shadow: 0 2px 10px rgba(0, 0, 0, 0.08);
        }

        .btn-custom {
            background: var(--primary-blue);
            border: none;
            padding: 12px 20px;
            border-radius: 4px;
            font-weight: 500;
            transition: all 0.3s;
            color: white;
        }

            .btn-custom:hover {
                background: var(--secondary-blue);
                color: white;
            }

        .btn-outline-custom {
            background: transparent;
            border: 1px solid var(--primary-blue);
            color: var(--primary-blue);
            padding: 10px 20px;
            border-radius: 4px;
            font-weight: 500;
            transition: all 0.3s;
        }

            .btn-outline-custom:hover {
                background: var(--primary-blue);
                color: white;
            }

        .alert-custom {
            border-radius: 4px;
            border: none;
            box-shadow: 0 2px 10px rgba(0, 0, 0, 0.08);
        }

        h2, h4, h5 {
            color: var(--primary-blue);
        }

        .welcome-section {
            background: #e8f4ff;
            border-radius: 8px;
            padding: 20px;
            margin-bottom: 25px;
            border-left: 4px solid var(--primary-blue);
        }

        /* Notification Styles */
        .notification-bell {
            position: relative;
            display: inline-block;
        }

        .notification-dropdown {
            position: absolute;
            top: 100%;
            right: 0;
            width: 400px;
            max-height: 500px;
            overflow-y: auto;
            background: white;
            border: 1px solid var(--border-color);
            border-radius: 4px;
            box-shadow: 0 2px 15px rgba(0, 0, 0, 0.1);
            z-index: 1050;
            display: none;
        }

        .notification-item {
            padding: 1rem;
            border-bottom: 1px solid #e9ecef;
            cursor: pointer;
            transition: all 0.2s ease;
        }

            .notification-item.unread {
                background-color: #f8f9fa;
                border-left: 4px solid var(--primary-blue);
            }

            .notification-item:hover {
                background-color: #e3f2fd;
            }

        .notification-content {
            position: relative;
        }

        .notification-title {
            font-weight: 600;
            margin-bottom: 0.25rem;
            color: #212529;
            font-size: 0.95rem;
        }

        .notification-message {
            margin-bottom: 0.5rem;
            color: #495057;
            font-size: 0.875rem;
        }

        .notification-time {
            font-size: 0.75rem;
            color: #6c757d;
        }

        .notification-type {
            position: absolute;
            top: 0;
            right: 0;
            font-size: 0.75rem;
            padding: 0.25rem 0.5rem;
            color: white;
            border-radius: 4px;
        }

        .notification-header {
            padding: 1rem;
            background-color: #f8f9fa;
            border-bottom: 1px solid #e9ecef;
            display: flex;
            justify-content: space-between;
            align-items: center;
            font-weight: 600;
        }

        .mark-all-read {
            font-size: 0.875rem;
            color: var(--primary-blue);
            text-decoration: none;
            cursor: pointer;
        }

            .mark-all-read:hover {
                text-decoration: underline;
            }

        .notification-footer {
            padding: 0.75rem;
            background-color: #f8f9fa;
            border-top: 1px solid #e9ecef;
            text-align: center;
        }

        /* Action Cards */
        .dashboard-actions {
            display: grid;
            grid-template-columns: repeat(auto-fit, minmax(250px, 1fr));
            gap: 20px;
            margin-bottom: 30px;
        }

        .action-card {
            background: white;
            border-radius: 8px;
            padding: 30px;
            text-align: center;
            box-shadow: 0 2px 15px rgba(0, 0, 0, 0.08);
            transition: transform 0.3s ease;
            cursor: pointer;
            border: 1px solid var(--border-color);
        }

            .action-card:hover {
                transform: translateY(-5px);
                box-shadow: 0 5px 20px rgba(0, 0, 0, 0.12);
            }

            .action-card i {
                font-size: 2.5rem;
                margin-bottom: 15px;
                color: var(--primary-blue);
            }

            .action-card h3 {
                margin-bottom: 10px;
                color: var(--primary-blue);
            }

            .action-card p {
                opacity: 0.9;
                margin-bottom: 15px;
                color: var(--light-text);
            }

        /* Modal Styles */
        .modal {
            display: none;
            position: fixed;
            z-index: 1000;
            left: 0;
            top: 0;
            width: 100%;
            height: 100%;
            overflow: auto;
            background-color: rgba(0,0,0,0.5);
        }

        .modal-content {
            background-color: #fefefe;
            margin: 10% auto;
            padding: 20px;
            border: 1px solid #888;
            width: 80%;
            max-width: 600px;
            border-radius: 8px;
            color: #333;
        }

        .close {
            color: #aaa;
            float: right;
            font-size: 28px;
            font-weight: bold;
            cursor: pointer;
        }

        .form-group {
            margin-bottom: 15px;
        }

        .form-control {
            width: 100%;
            padding: 8px 12px;
            border: 1px solid #ddd;
            border-radius: 4px;
            box-sizing: border-box;
        }

        label {
            display: block;
            margin-bottom: 5px;
            font-weight: bold;
        }

        .alert {
            padding: 15px;
            margin-bottom: 20px;
            border: 1px solid transparent;
            border-radius: 4px;
        }

        .alert-success {
            color: #3c763d;
            background-color: #dff0d8;
            border-color: #d6e9c6;
        }

        .alert-danger {
            color: #a94442;
            background-color: #f2dede;
            border-color: #ebccd1;
        }
    </style>
</head>
<body>
    <div class="dashboard-container">
        <!-- Page Header with Notification Bell -->
        <div class="d-flex justify-content-between align-items-center mb-4">
            <div>
                <h1 class="h3 mb-1">Resident Dashboard</h1>
                <p class="text-muted">Welcome to the security management system</p>
            </div>

            <!-- Notification Bell -->
            <div class="notification-bell">
                <a href="#" id="residentNotificationBell" class="btn btn-outline-primary position-relative">
                    <i class="fas fa-bell"></i>
                    @if (unreadCount > 0)
                    {
                        <span class="position-absolute top-0 start-100 translate-middle badge rounded-pill bg-danger">
                            @unreadCount
                            <span class="visually-hidden">unread notifications</span>
                        </span>
                    }
                </a>
                <div class="notification-dropdown" id="residentNotificationDropdown">
                    <div class="notification-header">
                        <span class="fw-bold">All Notifications</span>
                        @if (unreadCount > 0)
                        {
                            <a href="#" class="mark-all-read" id="markAllAsRead">Mark all as read</a>
                        }
                    </div>
                    <div id="residentNotificationList">
                        @foreach (var notification in notifications.Take(10))
                        {
                            <div class="notification-item @(!notification.IsRead ? "unread" : "")"
                                 data-id="@notification.NotificationId"
                                 data-url="@(notification.RelatedUrl ?? "#")">
                                <div class="notification-content">
                                    <div class="notification-title">@notification.Title</div>
                                    <div class="notification-message">@notification.Message</div>
                                    <div class="notification-time">@notification.CreatedAt.ToString("g")</div>
                                    @if (!string.IsNullOrEmpty(notification.NotificationType))
                                    {
                                        <span class="notification-type badge @GetNotificationTypeBadge(notification.NotificationType)">
                                            @notification.NotificationType
                                        </span>
                                    }
                                </div>
                            </div>
                        }
                        @if (!notifications.Any())
                        {
                            <div class="notification-item text-center py-3">
                                <i class="fas fa-bell-slash text-muted me-2"></i>
                                No notifications
                            </div>
                        }
                        @if (notifications.Count > 10)
                        {
                            <div class="notification-footer text-center py-2">
                                <a href="#" class="text-primary">View all notifications</a>
                            </div>
                        }
                    </div>
                </div>
            </div>
        </div>

        <div class="dashboard-card">
            <div class="card-header-custom">
                <div class="d-flex justify-content-between align-items-center">
                    <h2 class="mb-0"><i class="fas fa-home me-2"></i>Resident Dashboard</h2>
                    <div>
                        <span class="badge bg-light text-dark">
                            <i class="fas fa-user me-1"></i>@Model.Resident.FullName
                        </span>
                    </div>
                </div>
            </div>
            <div class="card-body">
                <div class="welcome-section">
                    <h4><i class="fas fa-user me-2"></i>Welcome, @Model.Resident.FullName!</h4>
                    <p class="mb-0">You have successfully logged in to the Pirana Security System resident portal.</p>
                </div>

                @if (TempData["SuccessMessage"] != null)
                {
                    <div class="alert alert-success alert-custom">
                        <i class="fas fa-check-circle me-2"></i>@TempData["SuccessMessage"]
                    </div>
                }

                @if (TempData["ErrorMessage"] != null)
                {
                    <div class="alert alert-danger alert-custom">
                        <i class="fas fa-exclamation-triangle me-2"></i>@TempData["ErrorMessage"]
                    </div>
                }

                <div class="dashboard-actions">
                    <div class="action-card" onclick="openModal('detailsModal')">
                        <i class="fas fa-user-circle"></i>
                        <h3>My Details</h3>
                        <p>View and update your personal information</p>
                        <button class="btn btn-custom">View Details</button>
                    </div>

                    <div class="action-card" onclick="window.location.href='@Url.Action("ReportIncident", "Resident")'">
                        <i class="fas fa-exclamation-triangle"></i>
                        <h3>Report Incident</h3>
                        <p>Report a security incident or concern</p>
                        <button class="btn btn-custom">Report Now</button>
                    </div>

                    <div class="action-card" onclick="window.location.href='@Url.Action("MyIncidents", "Resident")'">
                        <i class="fas fa-clipboard-list"></i>
                        <h3>My Reports</h3>
                        <p>View your submitted incident reports</p>
                        <button class="btn btn-custom">View Reports</button>
                    </div>
                </div>

                <div style="text-align: center; margin-top: 30px;">
                    @using (Html.BeginForm("Logout", "Resident", FormMethod.Post))
                    {
                        @Html.AntiForgeryToken()
                        <button type="submit" class="btn btn-custom">Logout</button>
                    }
                </div>
            </div>
        </div>
    </div>

    <!-- My Details Modal -->
    <div id="detailsModal" class="modal">
        <div class="modal-content">
            <span class="close" onclick="closeModal('detailsModal')">&times;</span>
            <h2>My Details</h2>
            @using (Html.BeginForm("UpdateProfile", "Resident", FormMethod.Post))
            {
                @Html.AntiForgeryToken()
                @Html.Hidden("Id", Model.Resident.Id)

                <div class="form-group">
                    <label for="FullName">Full Name</label>
                    <input type="text" id="FullName" name="FullName" class="form-control" value="@Model.Resident.FullName" />
                </div>

                <div class="form-group">
                    <label for="Email">Email</label>
                    <input type="email" id="Email" name="Email" class="form-control" value="@Model.Resident.Email" />
                </div>

                <div class="form-group">
                    <label for="PhoneNumber">Phone Number</label>
                    <input type="text" id="PhoneNumber" name="PhoneNumber" class="form-control" value="@Model.Resident.PhoneNumber" />
                </div>

                <button type="submit" class="btn btn-custom">Update Details</button>
            }
        </div>
    </div>

    <script src="https://cdn.jsdelivr.net/npm/bootstrap@5.3.0/dist/js/bootstrap.bundle.min.js"></script>
    <script src="https://code.jquery.com/jquery-3.6.0.min.js"></script>
    <script>
        // Modal functions
        function openModal(modalId) {
            document.getElementById(modalId).style.display = 'block';
        }

        function closeModal(modalId) {
            document.getElementById(modalId).style.display = 'none';
        }

        // Close modal when clicking outside
        window.onclick = function (event) {
            if (event.target.className === 'modal') {
                event.target.style.display = 'none';
            }
        }

        $(document).ready(function () {
            console.log("Resident dashboard loaded");

            // Notification bell functionality
            $('#residentNotificationBell').click(function (e) {
                e.preventDefault();
                e.stopPropagation();
                $('#residentNotificationDropdown').toggle();
                loadResidentNotifications();
            });

            // Close dropdown when clicking outside
            $(document).click(function (e) {
                if (!$(e.target).closest('.notification-bell').length) {
                    $('#residentNotificationDropdown').hide();
                }
            });

            // Mark notification as read and navigate when clicked
            $(document).on('click', '.notification-item', function (e) {
                e.preventDefault();
                var notificationId = $(this).data('id');
                var url = $(this).data('url');

                if (notificationId) {
                    markNotificationAsRead(notificationId);
                    $(this).removeClass('unread');

                    // Navigate to related URL if available
                    if (url && url !== '#') {
                        window.location.href = url;
                    }
                }
            });

            // Mark all as read
            $('#markAllAsRead').click(function (e) {
                e.preventDefault();
                e.stopPropagation();
                markAllNotificationsAsRead();
            });

            // Load notifications function
            function loadResidentNotifications() {
                $.get('@Url.Action("GetNotifications", "Resident")', function (data) {
                    if (data.error) {
                        console.error('Error loading notifications:', data.error);
                        return;
                    }

                    updateNotificationUI(data);
                }).fail(function(xhr, status, error) {
                    console.error('Failed to load notifications:', error);
                });
            }

            function updateNotificationUI(data) {
                var notificationList = $('#residentNotificationList');
                notificationList.empty();

                if (data.notifications && data.notifications.length > 0) {
                    $.each(data.notifications, function (index, notification) {
                        var item = $('<div>').addClass('notification-item ' + (notification.IsRead ? '' : 'unread'))
                            .attr('data-id', notification.Id)
                            .attr('data-url', notification.RelatedUrl || '#')
                            .html('<div class="notification-content">' +
                                  '<div class="notification-title">' + (notification.Title || 'Notification') + '</div>' +
                                  '<div class="notification-message">' + notification.Message + '</div>' +
                                  '<div class="notification-time">' +
                                  new Date(notification.CreatedAt).toLocaleString() + '</div>' +
                                  (notification.Type ?
                                  '<span class="notification-type badge ' + getNotificationTypeClass(notification.Type) + '">' +
                                  notification.Type + '</span>' : '') +
                                  '</div>');

                        notificationList.append(item);
                    });

                    // Add view all link if there are more than 10 notifications
                    if (data.notifications.length > 10) {
                        notificationList.append('<div class="notification-footer text-center py-2">' +
                            '<a href="#" class="text-primary">View all notifications</a></div>');
                    }
                } else {
                    notificationList.append('<div class="notification-item text-center py-3">' +
                        '<i class="fas fa-bell-slash text-muted me-2"></i>No notifications</div>');
                }

                // Update notification count
                updateNotificationCount(data.unreadCount || 0);
            }

            function getNotificationTypeClass(type) {
                switch (type.toLowerCase()) {
                    case 'login': return 'bg-success';
                    case 'incident': return 'bg-danger';
                    case 'system': return 'bg-info';
                    case 'security': return 'bg-warning';
                    case 'guard': return 'bg-primary';
                    case 'instructor': return 'bg-purple';
                    case 'checkin': return 'bg-teal';
                    default: return 'bg-secondary';
                }
            }

            function updateNotificationCount(count) {
                var badge = $('#residentNotificationBell .badge');
                var markAllLink = $('#markAllAsRead');

                if (count > 0) {
                    badge.text(count).show();
                    markAllLink.show();
                } else {
                    badge.hide();
                    markAllLink.hide();
                }
            }

            function markNotificationAsRead(notificationId) {
                $.post('@Url.Action("MarkNotificationAsRead", "Resident")', { id: notificationId })
                    .done(function(response) {
                        if (response.success) {
                            // Update unread count
                            var currentCount = parseInt($('#residentNotificationBell .badge').text()) || 0;
                            if (currentCount > 0) {
                                updateNotificationCount(currentCount - 1);
                            }
                        }
                    })
                    .fail(function() {
                        console.error('Failed to mark notification as read');
                    });
            }

            function markAllNotificationsAsRead() {
                $.post('@Url.Action("MarkAllNotificationsAsRead", "Resident")')
                    .done(function(response) {
                        if (response.success) {
                            $('.notification-item').removeClass('unread');
                            updateNotificationCount(0);
                            $('#residentNotificationDropdown').hide();
                        }
                    })
                    .fail(function() {
                        console.error('Failed to mark all notifications as read');
                    });
            }

            // Auto-refresh notifications every 30 seconds
            setInterval(loadResidentNotifications, 30000);

            // Show success/error messages from TempData
            if ('@TempData["SuccessMessage"]') {
                setTimeout(function () {
                    $('.alert-success').fadeOut('slow');
                }, 5000);
            }
            if ('@TempData["ErrorMessage"]') {
                setTimeout(function () {
                    $('.alert-danger').fadeOut('slow');
                }, 5000);
            }
        });
    </script>
</body>
</html>

@functions {
    public string GetNotificationTypeBadge(string type)
    {
        switch (type?.ToLower())
        {
            case "login":
                return "bg-success";
            case "incident":
                return "bg-danger";
            case "system":
                return "bg-info";
            case "security":
                return "bg-warning";
            case "guard":
                return "bg-primary";
            case "instructor":
                return "bg-purple";
            case "checkin":
                return "bg-teal";
            default:
                return "bg-secondary";
        }
    }
}