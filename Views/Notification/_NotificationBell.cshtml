@model List<PiranaSecuritySystem.Models.Notification>

@{
    var unreadCount = Model.Count(n => !n.IsRead);
}

<div class="notification-bell">
    <a href="#" id="residentNotificationBell">
        <i class="fas fa-bell fa-2x"></i>
        @if (unreadCount > 0)
        {
            <span class="notification-count" id="residentNotificationCount">@unreadCount</span>
        }
        else
        {
            <span class="notification-count" id="residentNotificationCount" style="display: none;">0</span>
        }
    </a>
    <div class="notification-dropdown" id="residentNotificationDropdown">
        <div class="notification-header">
            <span>Notifications</span>
            @if (unreadCount > 0)
            {
                <span class="mark-all-read" id="markAllAsRead">Mark all as read</span>
            }
        </div>
        <div id="residentNotificationList">
            @foreach (var notification in Model)
            {
                <div class="notification-item @(!notification.IsRead ? "unread" : "")"
                     data-id="@notification.NotificationId">
                    <div>@notification.Message</div>
                    <span class="notification-time">
                        @if (notification.CreatedAt > DateTime.MinValue && notification.CreatedAt.Year > 2000)
                        {
                            @notification.CreatedAt.ToString("MMM dd, yyyy hh:mm tt")
                        }
                        else
                        {
                            @:Just now
                        }
                    </span>
                </div>
            }
            @if (!Model.Any())
            {
                <div class="notification-item">No notifications</div>
            }
        </div>
    </div>
</div>

<script>
    // Add this script to handle date formatting for AJAX-loaded notifications
    function formatNotificationDate(dateString) {
        try {
            if (!dateString) return 'Just now';

            const date = new Date(dateString);
            if (isNaN(date.getTime())) return 'Just now';

            const now = new Date();
            const diffInSeconds = Math.floor((now - date) / 1000);

            if (diffInSeconds < 60) return 'Just now';
            if (diffInSeconds < 3600) return Math.floor(diffInSeconds / 60) + ' min ago';
            if (diffInSeconds < 86400) return Math.floor(diffInSeconds / 3600) + ' hours ago';
            if (diffInSeconds < 604800) return Math.floor(diffInSeconds / 86400) + ' days ago';

            return date.toLocaleDateString() + ' ' + date.toLocaleTimeString();
        } catch (e) {
            return 'Just now';
        }
    }
</script>