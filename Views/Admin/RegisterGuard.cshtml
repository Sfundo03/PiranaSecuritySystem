@model PiranaSecuritySystem.ViewModels.RegisterGuardViewModel

@{
    ViewBag.Title = "Register New Guard";
    Layout = "~/Views/Shared/_Layout.cshtml";
}

<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>PIRANA GUARDING - Register Guard</title>
    <link href="https://cdn.jsdelivr.net/npm/bootstrap@5.3.0/dist/css/bootstrap.min.css" rel="stylesheet">
    <link rel="stylesheet" href="https://cdnjs.cloudflare.com/ajax/libs/font-awesome/6.4.0/css/all.min.css">
    <style>
        :root {
            --primary-color: #2c3e50;
            --secondary-color: #3498db;
            --accent-color: #e74c3c;
            --light-color: #ecf0f1;
            --dark-color: #2c3e50;
        }

        body {
            background: linear-gradient(135deg, #f5f7fa 0%, #c3cfe2 100%);
            min-height: 100vh;
            font-family: 'Segoe UI', Tahoma, Geneva, Verdana, sans-serif;
            padding: 20px 0;
        }

        .form-container {
            max-width: 1000px;
            margin: 0 auto;
        }

        .form-card {
            background: white;
            border-radius: 15px;
            box-shadow: 0 10px 30px rgba(0, 0, 0, 0.1);
            overflow: hidden;
        }

        .card-header-custom {
            background: linear-gradient(to right, var(--primary-color), var(--secondary-color));
            color: white;
            padding: 30px;
            text-align: center;
        }

        .form-section {
            padding: 25px;
            border-bottom: 1px solid #eee;
        }

        .btn-custom {
            background: linear-gradient(to right, var(--primary-color), var(--secondary-color));
            border: none;
            padding: 12px 30px;
            border-radius: 8px;
            font-weight: 600;
            color: white;
            transition: all 0.3s;
        }

            .btn-custom:hover {
                transform: translateY(-2px);
                box-shadow: 0 5px 15px rgba(0,0,0,0.2);
            }

        .btn-outline-custom {
            border: 2px solid var(--secondary-color);
            color: var(--secondary-color);
            padding: 10px 25px;
            border-radius: 8px;
            font-weight: 600;
            transition: all 0.3s;
        }

            .btn-outline-custom:hover {
                background: var(--secondary-color);
                color: white;
            }

        .form-control {
            padding: 12px 15px;
            border-radius: 8px;
            border: 2px solid #e9ecef;
            transition: all 0.3s;
        }

            .form-control:focus {
                border-color: var(--secondary-color);
                box-shadow: 0 0 0 0.2rem rgba(52, 152, 219, 0.25);
            }

        .input-icon {
            position: relative;
        }

            .input-icon i {
                position: absolute;
                left: 15px;
                top: 50%;
                transform: translateY(-50%);
                color: #6c757d;
                z-index: 3;
            }

            .input-icon input,
            .input-icon select {
                padding-left: 45px;
                position: relative;
                z-index: 2;
                background: transparent;
            }

        h4 {
            color: var(--primary-color);
            margin-bottom: 20px;
            padding-bottom: 10px;
            border-bottom: 2px solid var(--secondary-color);
        }

        .field-validation-error {
            color: #dc3545;
            font-size: 0.875rem;
            display: block;
            margin-top: 5px;
        }

        .validation-summary-errors {
            color: #dc3545;
            background: #f8d7da;
            border: 1px solid #f5c6cb;
            border-radius: 5px;
            padding: 10px;
            margin-bottom: 20px;
        }

        .loading-overlay {
            display: none;
            position: fixed;
            top: 0;
            left: 0;
            width: 100%;
            height: 100%;
            background: rgba(0,0,0,0.5);
            z-index: 9999;
            justify-content: center;
            align-items: center;
        }

        .spinner-border {
            width: 3rem;
            height: 3rem;
        }
    </style>
</head>
<body>
    <div class="loading-overlay" id="loadingOverlay">
        <div class="spinner-border text-light" role="status">
            <span class="visually-hidden">Loading...</span>
        </div>
    </div>

    <div class="form-container">
        <div class="form-card">
            <div class="card-header-custom">
                <h2 class="mb-0"><i class="fas fa-shield-alt me-2"></i>Register New Guard</h2>
                <p class="mb-0 mt-2">Complete the form below to register a new guard</p>
            </div>

            @using (Html.BeginForm("RegisterGuard", "Admin", FormMethod.Post, new { @class = "form-horizontal", role = "form", id = "registerForm" }))
            {
                @Html.AntiForgeryToken()

                @Html.ValidationSummary(true, "", new { @class = "text-danger" })

                <div class="form-section">
                    <h4><i class="fas fa-user me-2"></i>Personal Information</h4>
                    <div class="row">
                        <div class="col-md-6 mb-3">
                            <div class="input-icon">
                                <i class="fas fa-signature"></i>
                                @Html.TextBoxFor(m => m.Guard_FName, new { @class = "form-control", placeholder = "First Name", required = "required" })
                            </div>
                            @Html.ValidationMessageFor(m => m.Guard_FName, "", new { @class = "field-validation-error" })
                        </div>
                        <div class="col-md-6 mb-3">
                            <div class="input-icon">
                                <i class="fas fa-signature"></i>
                                @Html.TextBoxFor(m => m.Guard_LName, new { @class = "form-control", placeholder = "Last Name", required = "required" })
                            </div>
                            @Html.ValidationMessageFor(m => m.Guard_LName, "", new { @class = "field-validation-error" })
                        </div>
                    </div>

                    <div class="row">
                        <div class="col-md-6 mb-3">
                            <div class="input-icon">
                                <i class="fas fa-id-card"></i>
                                @Html.TextBoxFor(m => m.IdentityNumber, new { @class = "form-control", placeholder = "ID Number (13 digits)", maxlength = "13", required = "required" })
                            </div>
                            @Html.ValidationMessageFor(m => m.IdentityNumber, "", new { @class = "field-validation-error" })
                        </div>
                        <div class="col-md-6 mb-3">
                            <div class="input-icon">
                                <i class="fas fa-venus-mars"></i>
                                @Html.DropDownListFor(m => m.Gender, new SelectList(new[] { "M", "F" }), "Select Gender", new { @class = "form-control", required = "required" })
                            </div>
                            @Html.ValidationMessageFor(m => m.Gender, "", new { @class = "field-validation-error" })
                        </div>
                    </div>

                    <div class="mb-3">
                        <div class="input-icon">
                            <i class="fas fa-certificate"></i>
                            @Html.TextBoxFor(m => m.PSIRAnumber, new { @class = "form-control", placeholder = "PSIRA Number", required = "required" })
                        </div>
                        @Html.ValidationMessageFor(m => m.PSIRAnumber, "", new { @class = "field-validation-error" })
                    </div>
                </div>

                <div class="form-section">
                    <h4><i class="fas fa-address-book me-2"></i>Contact Information</h4>
                    <div class="row">
                        <div class="col-md-6 mb-3">
                            <div class="input-icon">
                                <i class="fas fa-envelope"></i>
                                @Html.TextBoxFor(m => m.Email, new { @class = "form-control", placeholder = "Email Address", type = "email", required = "required" })
                            </div>
                            @Html.ValidationMessageFor(m => m.Email, "", new { @class = "field-validation-error" })
                        </div>
                        <div class="col-md-6 mb-3">
                            <div class="input-icon">
                                <i class="fas fa-phone"></i>
                                @Html.TextBoxFor(m => m.PhoneNumber, new { @class = "form-control", placeholder = "Phone Number (10 digits)", maxlength = "10", required = "required" })
                            </div>
                            @Html.ValidationMessageFor(m => m.PhoneNumber, "", new { @class = "field-validation-error" })
                        </div>
                    </div>

                    <div class="mb-3">
                        <div class="input-icon">
                            <i class="fas fa-phone-alt"></i>
                            @Html.TextBoxFor(m => m.Emergency_CellNo, new { @class = "form-control", placeholder = "Emergency Contact Number", maxlength = "10", required = "required" })
                        </div>
                        @Html.ValidationMessageFor(m => m.Emergency_CellNo, "", new { @class = "field-validation-error" })
                    </div>

                    <div class="mb-3">
                        <div class="input-icon">
                            <i class="fas fa-home"></i>
                            @Html.TextBoxFor(m => m.Address, new { @class = "form-control", placeholder = "Full Address", required = "required" })
                        </div>
                        @Html.ValidationMessageFor(m => m.Address, "", new { @class = "field-validation-error" })
                    </div>
                </div>

                <div class="form-section">
                    <h4><i class="fas fa-key me-2"></i>Account Information</h4>
                    <div class="row">
                        <div class="col-md-6 mb-3">
                            <div class="input-icon">
                                <i class="fas fa-lock"></i>
                                @Html.PasswordFor(m => m.Password, new { @class = "form-control", placeholder = "Password", required = "required" })
                            </div>
                            @Html.ValidationMessageFor(m => m.Password, "", new { @class = "field-validation-error" })
                        </div>
                        <div class="col-md-6 mb-3">
                            <div class="input-icon">
                                <i class="fas fa-lock"></i>
                                @Html.PasswordFor(m => m.ConfirmPassword, new { @class = "form-control", placeholder = "Confirm Password", required = "required" })
                            </div>
                            @Html.ValidationMessageFor(m => m.ConfirmPassword, "", new { @class = "field-validation-error" })
                        </div>
                    </div>

                    <div class="row">
                        <div class="col-md-6 mb-3">
                            <div class="input-icon">
                                <i class="fas fa-users"></i>
                                @Html.DropDownListFor(m => m.Group, new SelectList(new[] { "Group A", "Group B", "Group C" }), "Select Group", new { @class = "form-control", required = "required" })
                            </div>
                            @Html.ValidationMessageFor(m => m.Group, "", new { @class = "field-validation-error" })
                        </div>
                        <div class="col-md-6 mb-3">
                            <div class="input-icon">
                                <i class="fas fa-map-marker-alt"></i>
                                @Html.DropDownListFor(m => m.Site, Model.SiteOptions, "Select Site", new { @class = "form-control", required = "required", id = "siteSelect" })
                            </div>
                            @Html.ValidationMessageFor(m => m.Site, "", new { @class = "field-validation-error" })
                        </div>
                    </div>
                </div>

                <div class="form-section text-center">
                    <button type="submit" class="btn btn-custom me-3" id="submitButton">
                        <i class="fas fa-user-plus me-2"></i>Register Guard
                    </button>
                    @Html.ActionLink("Cancel", "ManageGuards", "Admin", null, new { @class = "btn btn-outline-custom" })
                </div>
            }
        </div>
    </div>

    @section Scripts {
        @Scripts.Render("~/bundles/jqueryval")
        <script src="https://cdnjs.cloudflare.com/ajax/libs/jquery.inputmask/5.0.7/jquery.inputmask.min.js"></script>
        <script>
        $(document).ready(function () {
            // Show success/error messages
            var successMessage = '@(TempData["SuccessMessage"] ?? "")';
            var errorMessage = '@(TempData["ErrorMessage"] ?? "")';

            if (successMessage) {
                showAlert('success', successMessage);
            }
            if (errorMessage) {
                showAlert('danger', errorMessage);
            }

            // Input masks
            $("#IdentityNumber").inputmask("9999999999999");
            $("#PhoneNumber").inputmask("9999999999");
            $("#Emergency_CellNo").inputmask("9999999999");

            // AJAX form submission
            $('#registerForm').on('submit', function (e) {
                e.preventDefault(); // Prevent default form submission

                if (!$(this).valid()) {
                    return false;
                }

                // Show loading overlay
                $('#loadingOverlay').show();
                $('#submitButton').prop('disabled', true).html('<i class="fas fa-spinner fa-spin me-2"></i>Registering...');

                // Get form data
                var formData = $(this).serialize();

                // Submit via AJAX
                $.ajax({
                    url: $(this).attr('action'),
                    type: 'POST',
                    data: formData,
                    success: function (response) {
                        // Hide loading overlay
                        $('#loadingOverlay').hide();
                        $('#submitButton').prop('disabled', false).html('<i class="fas fa-user-plus me-2"></i>Register Guard');

                        // Redirect to dashboard immediately
                        window.location.href = '/Admin/ManageGuards';
                    },
                    error: function (xhr, status, error) {
                        // Hide loading overlay
                        $('#loadingOverlay').hide();
                        $('#submitButton').prop('disabled', false).html('<i class="fas fa-user-plus me-2"></i>Register Guard');

                        // Show error message but still redirect
                        showAlert('danger', 'Guard registered but there was an issue. Redirecting...');

                        // Redirect after a short delay
                        setTimeout(function() {
                            window.location.href = '/Admin/ManageGuards';
                        }, 2000);
                    }
                });
            });

            // Phone number validation
            $('#PhoneNumber, #Emergency_CellNo').on('input', function () {
                var value = $(this).val().replace(/\D/g, '');
                $(this).val(value);
            });

            // Real-time validation for ID number
            $('#IdentityNumber').on('input', function () {
                var value = $(this).val().replace(/\D/g, '');
                $(this).val(value);

                if (value.length === 13) {
                    $(this).removeClass('is-invalid').addClass('is-valid');
                } else if (value.length > 0) {
                    $(this).removeClass('is-valid').addClass('is-invalid');
                }
            });

            // Email validation
            $('#Email').on('blur', function() {
                var email = $(this).val();
                if (email && !isValidEmail(email)) {
                    $(this).addClass('is-invalid');
                } else {
                    $(this).removeClass('is-invalid');
                }
            });
        });

        // Fixed email validation function - using String.fromCharCode to avoid @@ symbol issues
        function isValidEmail(email) {
            var atSymbol = String.fromCharCode(64); // @@ symbol
            var regex = new RegExp('^[^\\s' + atSymbol + ']+' + atSymbol + '[^\\s' + atSymbol + ']+\\.[^\\s' + atSymbol + ']+$');
            return regex.test(email);
        }

        function showAlert(type, message) {
            // Remove existing alerts
            $('.alert').remove();

            var alertDiv = document.createElement('div');
            alertDiv.className = 'alert alert-' + type + ' alert-dismissible fade show';
            alertDiv.style.cssText = 'position: fixed; top: 20px; right: 20px; z-index: 1050; min-width: 300px;';
            alertDiv.innerHTML = '<strong>' + (type === 'success' ? 'Success!' : 'Error!') + '</strong> ' + message + '<button type="button" class="btn-close" data-bs-dismiss="alert"></button>';
            document.body.appendChild(alertDiv);

            setTimeout(function() {
                if (alertDiv.parentNode) {
                    alertDiv.parentNode.removeChild(alertDiv);
                }
            }, 5000);
        }
        </script>
    }
</body>
</html>