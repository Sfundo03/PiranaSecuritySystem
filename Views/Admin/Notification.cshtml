@model IEnumerable<PiranaSecuritySystem.Models.Notification>
@{
    ViewBag.Title = "Notifications";
    Layout = "~/Views/Shared/_Layout.cshtml";
}

<div class="container-fluid">
    <div class="row">
        <div class="col-12">
            <div class="d-flex justify-content-between align-items-center mb-4">
                <div>
                    <h1 class="h3 mb-1 text-gray-800">Notifications</h1>
                    <p class="text-muted">View all your system notifications</p>
                </div>
                <div>
                    <button id="markAllAsRead" class="btn btn-outline-primary me-2">
                        <i class="fas fa-check-double me-1"></i> Mark All as Read
                    </button>
                    <a href="@Url.Action("Dashboard", "Admin")" class="btn btn-secondary">
                        <i class="fas fa-arrow-left me-1"></i> Back to Dashboard
                    </a>
                </div>
            </div>

            <div class="card shadow mb-4">
                <div class="card-header py-3">
                    <h6 class="m-0 font-weight-bold text-primary">All Notifications</h6>
                </div>
                <div class="card-body p-0">
                    <div class="list-group list-group-flush">
                        @if (Model.Any())
                        {
                            foreach (var notification in Model)
                            {
                                <div class="list-group-item list-group-item-action @(!notification.IsRead ? "bg-light" : "")"
                                     data-id="@notification.NotificationId"
                                     data-url="@notification.RelatedUrl">
                                    <div class="d-flex w-100 justify-content-between">
                                        <h6 class="mb-1">@notification.Message</h6>
                                        <small>@notification.CreatedAt.ToString("g")</small>
                                    </div>
                                    <div class="d-flex justify-content-between align-items-center">
                                        <small class="text-muted">
                                            @if (!string.IsNullOrEmpty(notification.NotificationType))
                                            {
                                                <span class="badge @GetNotificationTypeBadge(notification.NotificationType)">
                                                    @notification.NotificationType
                                                </span>
                                            }
                                        </small>
                                        @if (!notification.IsRead)
                                        {
                                            <span class="badge bg-primary">New</span>
                                        }
                                    </div>
                                </div>
                            }
                        }
                        else
                        {
                            <div class="list-group-item text-center py-5">
                                <i class="fas fa-bell-slash fa-3x text-muted mb-3"></i>
                                <h5 class="text-muted">No notifications</h5>
                                <p class="text-muted">You don't have any notifications at this time.</p>
                            </div>
                        }
                    </div>
                </div>
            </div>
        </div>
    </div>
</div>

@functions {
    public string GetNotificationTypeBadge(string type)
    {
        switch (type?.ToLower())
        {
            case "login":
                return "bg-success";
            case "system":
                return "bg-info";
            case "security":
                return "bg-warning";
            case "alert":
                return "bg-danger";
            default:
                return "bg-secondary";
        }
    }
}

@section scripts {
    <script>
        $(document).ready(function () {
            // Mark notification as read and navigate when clicked
            $('.list-group-item').click(function (e) {
                e.preventDefault();
                var notificationId = $(this).data('id');
                var url = $(this).data('url');

                if (notificationId) {
                    markNotificationAsRead(notificationId);
                    $(this).removeClass('bg-light').find('.badge.bg-primary').remove();

                    // Navigate to related URL if available
                    if (url && url !== '#') {
                        window.location.href = url;
                    }
                }
            });

            // Mark all as read
            $('#markAllAsRead').click(function (e) {
                e.preventDefault();
                e.stopPropagation();
                markAllNotificationsAsRead();
            });

            function markNotificationAsRead(notificationId) {
                $.post('@Url.Action("MarkNotificationAsRead", "Admin")', { id: notificationId })
                    .fail(function () {
                        console.error('Failed to mark notification as read');
                    });
            }

            function markAllNotificationsAsRead() {
                $.post('@Url.Action("MarkAllNotificationsAsRead", "Admin")')
                    .done(function (response) {
                        if (response.success) {
                            $('.list-group-item').removeClass('bg-light');
                            $('.badge.bg-primary').remove();
                        }
                    })
                    .fail(function () {
                        console.error('Failed to mark all notifications as read');
                    });
            }
        });
    </script>
}