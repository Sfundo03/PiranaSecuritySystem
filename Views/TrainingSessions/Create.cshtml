@model PiranaSecuritySystem.Controllers.TrainingSessionViewModel

@{
    ViewBag.Title = "Create Training Session";
}

<style>
    .container-fluid {
        max-width: 1200px;
        margin: 0 auto;
        padding: 40px 20px;
    }

    .card {
        border: none;
        border-radius: 12px;
        box-shadow: 0 8px 30px rgba(0, 0, 0, 0.12);
        background: #fff;
        margin-bottom: 30px;
        transition: all 0.3s ease;
    }

        .card:hover {
            box-shadow: 0 12px 40px rgba(0, 0, 0, 0.15);
            transform: translateY(-2px);
        }

    .card-header {
        background: linear-gradient(135deg, #2c3e50, #34495e);
        color: white;
        border-bottom: none;
        padding: 25px 30px;
        border-radius: 12px 12px 0 0 !important;
        position: relative;
        display: flex;
        justify-content: space-between;
        align-items: center;
    }

        .card-header::before {
            content: '';
            position: absolute;
            top: 0;
            left: 0;
            right: 0;
            height: 3px;
            background: linear-gradient(90deg, #3498db, #1abc9c);
        }

        .card-header h4 {
            font-weight: 600;
            margin: 0;
            font-size: 1.8rem;
            letter-spacing: -0.5px;
            display: flex;
            align-items: center;
        }

            .card-header h4:before {
                content: '';
                width: 4px;
                height: 24px;
                background: linear-gradient(135deg, #3498db, #1abc9c);
                margin-right: 12px;
                border-radius: 2px;
            }

    .card-body {
        padding: 35px;
    }

    .form-group {
        margin-bottom: 25px;
        position: relative;
    }

    .form-label {
        font-weight: 600;
        color: #2c3e50;
        margin-bottom: 8px;
        font-size: 14px;
        text-transform: uppercase;
        letter-spacing: 0.5px;
        display: block;
    }

    .form-control, .form-select {
        border: 2px solid #e9ecef;
        border-radius: 8px;
        padding: 12px 15px;
        font-size: 15px;
        transition: all 0.3s ease;
        background: #fff;
        color: #495057;
    }

        .form-control:focus, .form-select:focus {
            border-color: #3498db;
            box-shadow: 0 0 0 3px rgba(52, 152, 219, 0.1);
            background: #fff;
        }

    .input-group-text {
        background: #f8f9fa;
        border: 2px solid #e9ecef;
        border-right: none;
    }

    .text-muted {
        font-size: 13px;
        color: #6c757d !important;
        margin-top: 6px;
        display: block;
    }

    #guardsContainer {
        max-height: 300px;
        overflow-y: auto;
        border: 2px solid #e9ecef;
        border-radius: 8px;
        padding: 20px;
        background: #f8f9fa;
        transition: all 0.3s ease;
    }

        #guardsContainer:hover {
            border-color: #3498db;
        }

    #guardsLoading {
        text-align: center;
        padding: 20px;
        color: #6c757d;
        font-weight: 500;
    }

    .guard-list {
        display: grid;
        grid-template-columns: repeat(auto-fill, minmax(300px, 1fr));
        gap: 12px;
    }

    .form-check {
        background: white;
        padding: 12px 15px;
        border-radius: 6px;
        border: 1px solid #e9ecef;
        transition: all 0.3s ease;
        margin-bottom: 0;
    }

        .form-check:hover {
            border-color: #3498db;
            background: #f8f9fa;
            transform: translateY(-1px);
            box-shadow: 0 2px 8px rgba(0, 0, 0, 0.1);
        }

    .form-check-label {
        font-weight: 500;
        color: #495057;
        cursor: pointer;
    }

    .form-check-input {
        width: 18px;
        height: 18px;
        margin-right: 10px;
        border: 2px solid #dee2e6;
        border-radius: 4px;
    }

        .form-check-input:checked {
            background-color: #1abc9c;
            border-color: #1abc9c;
            box-shadow: 0 0 0 2px rgba(26, 188, 156, 0.2);
        }

    .text-danger {
        color: #e74c3c !important;
        font-size: 13px;
        font-weight: 500;
        margin-top: 6px;
        display: block;
    }

    .btn {
        border: none;
        border-radius: 8px;
        padding: 12px 25px;
        font-weight: 600;
        font-size: 15px;
        transition: all 0.3s ease;
        text-decoration: none;
        display: inline-flex;
        align-items: center;
        justify-content: center;
        margin-right: 10px;
    }

    .btn-primary {
        background: linear-gradient(135deg, #3498db, #2980b9);
        color: white;
        box-shadow: 0 4px 15px rgba(52, 152, 219, 0.3);
    }

        .btn-primary:hover {
            transform: translateY(-2px);
            box-shadow: 0 6px 20px rgba(52, 152, 219, 0.4);
            background: linear-gradient(135deg, #2980b9, #3498db);
            color: white;
        }

    .btn-outline-secondary {
        background: transparent;
        border: 2px solid #95a5a6;
        color: #95a5a6;
    }

        .btn-outline-secondary:hover {
            background: #95a5a6;
            color: white;
            transform: translateY(-2px);
        }

    .btn-outline-light {
        background: transparent;
        border: 2px solid white;
        color: white;
    }

        .btn-outline-light:hover {
            background: white;
            color: #2c3e50;
            transform: translateY(-2px);
        }

    /* Responsive adjustments */
    @@media (max-width: 768px) {
        .container-fluid {
            padding: 20px 15px;
        }

        .card-body {
            padding: 25px 20px;
        }

        .card-header {
            padding: 20px 25px;
            flex-direction: column;
            gap: 15px;
        }

            .card-header h4 {
                font-size: 1.5rem;
            }

        .guard-list {
            grid-template-columns: 1fr;
        }

        .btn {
            width: 100%;
            margin-bottom: 10px;
            margin-right: 0;
        }
    }
</style>

<div class="container-fluid">
    <div class="row">
        <div class="col-12">
            <div class="card">
                <div class="card-header">
                    <h4 class="mb-0">
                        <i class="fas fa-plus-circle me-2"></i>@ViewBag.Title
                    </h4>
                    @Html.ActionLink("Back to Dashboard", "Dashboard", "Instructor", null, new { @class = "btn btn-outline-light btn-sm" })
                </div>
                <div class="card-body">
                    @using (Html.BeginForm())
                    {
                        @Html.AntiForgeryToken()

                        <div class="row">
                            <div class="col-md-6">
                                <div class="form-group">
                                    @Html.LabelFor(m => m.Title, new { @class = "form-label" })
                                    @Html.TextBoxFor(m => m.Title, new { @class = "form-control", placeholder = "Enter training session title" })
                                    @Html.ValidationMessageFor(m => m.Title, "", new { @class = "text-danger" })
                                </div>

                                <div class="form-group">
                                    @Html.LabelFor(m => m.Site, new { @class = "form-label" })
                                    @Html.DropDownListFor(m => m.Site, (SelectList)ViewBag.Sites, "Select Site", new { @class = "form-select", id = "siteDropdown" })
                                    @Html.ValidationMessageFor(m => m.Site, "", new { @class = "text-danger" })
                                </div>

                                <div class="form-group">
                                    @Html.LabelFor(m => m.StartDate, new { @class = "form-label" })
                                    @Html.TextBoxFor(m => m.StartDate, "{0:yyyy-MM-ddTHH:mm}", new { @class = "form-control", type = "datetime-local" })
                                    @Html.ValidationMessageFor(m => m.StartDate, "", new { @class = "text-danger" })
                                </div>

                                <div class="form-group">
                                    @Html.LabelFor(m => m.EndDate, new { @class = "form-label" })
                                    @Html.TextBoxFor(m => m.EndDate, "{0:yyyy-MM-ddTHH:mm}", new { @class = "form-control", type = "datetime-local" })
                                    @Html.ValidationMessageFor(m => m.EndDate, "", new { @class = "text-danger" })
                                </div>

                                <div class="form-group">
                                    <label class="form-label">Capacity</label>
                                    <div class="input-group">
                                        <span class="input-group-text">
                                            <i class="fas fa-users"></i>
                                        </span>
                                        @Html.TextBoxFor(m => m.Capacity, new { @class = "form-control", @readonly = "readonly", id = "capacityField" })
                                    </div>
                                    <small class="text-muted">Capacity will be auto-filled based on selected guards</small>
                                </div>
                            </div>

                            <div class="col-md-6">
                                <div class="form-group">
                                    <label class="form-label">Select Guards</label>
                                    <div id="guardsLoading" class="d-none text-center py-3">
                                        <div class="spinner-border text-primary" role="status">
                                            <span class="visually-hidden">Loading...</span>
                                        </div>
                                        <p class="mt-2 text-muted">Loading guards...</p>
                                    </div>
                                    <div id="guardsContainer" class="border rounded p-3 bg-light">
                                        <p class="text-muted text-center mb-0">Please select a site to load guards</p>
                                    </div>
                                    <div id="guardsError" class="alert alert-danger d-none mt-2"></div>
                                </div>
                            </div>
                        </div>

                        <div class="row mt-4">
                            <div class="col-12">
                                <button type="submit" class="btn btn-primary me-2">
                                    <i class="fas fa-save me-1"></i>Create Session
                                </button>
                                @Html.ActionLink("Back to List", "Index", null, new { @class = "btn btn-outline-secondary" })
                            </div>
                        </div>
                    }
                </div>
            </div>
        </div>
    </div>
</div>

@section Scripts {
    <script>
        $(document).ready(function () {
            $('#siteDropdown').change(function () {
                var site = $(this).val();
                if (site) {
                    loadGuardsBySite(site);
                } else {
                    $('#guardsContainer').html('<p class="text-muted text-center mb-0">Please select a site to load guards</p>');
                    $('#capacityField').val('0');
                }
            });

            function loadGuardsBySite(site) {
                $('#guardsLoading').removeClass('d-none');
                $('#guardsContainer').addClass('d-none');
                $('#guardsError').addClass('d-none');

                // Use the same AJAX approach as the roster
                $.post('@Url.Action("GetGuardsBySite", "TrainingSession")', { site: site })
                    .done(function (response) {
                        $('#guardsLoading').addClass('d-none');
                        if (response.success) {
                            displayGuards(response.guards);
                            $('#capacityField').val(response.guards.length);
                            $('#guardsError').addClass('d-none');
                        } else {
                            $('#guardsError').text(response.message).removeClass('d-none');
                            $('#guardsContainer').removeClass('d-none').html('<p class="text-muted text-center mb-0">Error loading guards</p>');
                        }
                    })
                    .fail(function (xhr, status, error) {
                        $('#guardsLoading').addClass('d-none');
                        $('#guardsError').text('An error occurred while loading guards: ' + error).removeClass('d-none');
                        $('#guardsContainer').removeClass('d-none').html('<p class="text-muted text-center mb-0">Error loading guards. Please try again.</p>');
                    });
            }

            function displayGuards(guards) {
                var container = $('#guardsContainer');
                container.empty();

                if (guards.length === 0) {
                    container.html('<p class="text-muted text-center mb-0">No guards found for this site</p>');
                } else {
                    var html = '<div class="guard-list">';
                    guards.forEach(function (guard) {
                        html += `
                            <div class="form-check">
                                <input class="form-check-input guard-checkbox" type="checkbox" value="${guard.id}" id="guard_${guard.id}" checked>
                                <label class="form-check-label w-100" for="guard_${guard.id}">
                                    <strong>${guard.name}</strong><br>
                                    <small class="text-muted">Badge: ${guard.badge}</small>
                                </label>
                            </div>
                        `;
                    });
                    html += '</div>';
                    container.html(html);

                    // Update selected guard IDs when checkboxes change
                    $('.guard-checkbox').change(function () {
                        updateSelectedGuards();
                    });

                    updateSelectedGuards();
                }
                container.removeClass('d-none');
            }

            function updateSelectedGuards() {
                var selectedIds = [];
                $('.guard-checkbox:checked').each(function () {
                    selectedIds.push(parseInt($(this).val()));
                });

                // Create hidden input for selected guard IDs
                $('input[name="SelectedGuardIds"]').remove();
                selectedIds.forEach(function (id) {
                    $('form').append(`<input type="hidden" name="SelectedGuardIds" value="${id}" />`);
                });

                $('#capacityField').val(selectedIds.length);
            }
        });
    </script>
}