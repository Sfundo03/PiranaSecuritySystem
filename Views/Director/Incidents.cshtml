@model IEnumerable<PiranaSecuritySystem.Models.IncidentReport>
@{
    ViewBag.Title = "Incident Reports";
    Layout = "~/Views/Shared/_Layout.cshtml";
}

<style>
    /* Custom badge styles for better visibility */
    .badge-custom {
        font-weight: bold;
        padding: 0.35em 0.65em;
        font-size: 0.75em;
        border-radius: 0.25rem;
    }

    .badge-priority-critical {
        background-color: #dc3545;
        color: white !important;
    }

    .badge-priority-high {
        background-color: #fd7e14;
        color: white !important;
    }

    .badge-priority-medium {
        background-color: #20c997;
        color: white !important;
    }

    .badge-priority-low {
        background-color: #6c757d;
        color: white !important;
    }

    .badge-status-resolved {
        background-color: #198754;
        color: white !important;
    }

    .badge-status-inprogress {
        background-color: #0d6efd;
        color: white !important;
    }

    .badge-status-pending {
        background-color: #ffc107;
        color: #000 !important;
    }

    .badge-status-pendingreview {
        background-color: #17a2b8;
        color: white !important;
    }

    /* Ensure Font Awesome loads properly */
    .fas, .fa-eye {
        font-family: "Font Awesome 5 Free" !important;
        font-weight: 900;
    }

    .btn-sm {
        padding: 0.25rem 0.5rem;
        font-size: 0.875rem;
    }

    /* Action buttons styling */
    .action-buttons {
        white-space: nowrap;
    }

    /* Table styling improvements */
    .table th {
        background-color: #f8f9fa;
        border-bottom: 2px solid #dee2e6;
    }

    .table td {
        vertical-align: middle;
    }

    /* Description column styling */
    .description-cell {
        max-width: 200px;
        word-wrap: break-word;
    }

    /* Ensure all badges have proper contrast */
    .badge {
        color: white !important;
    }

    .badge-warning {
        color: #212529 !important;
    }
</style>

<div class="container-fluid">
    <!-- Page Header -->
    <div class="d-sm-flex align-items-center justify-content-between mb-4">
        <h1 class="h3 mb-0 text-gray-800">Incident Reports</h1>
        <div>
            <a href="@Url.Action("Dashboard", "Director")" class="btn btn-secondary btn-sm">
                <i class="fas fa-arrow-left"></i> Back to Dashboard
            </a>
        </div>
    </div>

    <!-- Filter Section -->
    <div class="card shadow mb-4">
        <div class="card-header py-3">
            <h6 class="m-0 font-weight-bold text-primary">Filters</h6>
        </div>
        <div class="card-body">
            @using (Html.BeginForm("Incidents", "Director", FormMethod.Get, new { @class = "form-inline" }))
            {
                <div class="form-group mr-3 mb-2">
                    <label for="status" class="mr-2">Status:</label>
                    @Html.DropDownList("status", ViewBag.StatusList as SelectList, "All Status", new { @class = "form-control form-control-sm" })
                </div>

                <div class="form-group mr-3 mb-2">
                    <label for="priority" class="mr-2">Priority:</label>
                    @Html.DropDownList("priority", ViewBag.PriorityList as SelectList, "All Priority", new { @class = "form-control form-control-sm" })
                </div>

                <div class="form-group mr-3 mb-2">
                    <label for="type" class="mr-2">Type:</label>
                    @Html.DropDownList("type", ViewBag.TypeList as SelectList, "All Types", new { @class = "form-control form-control-sm" })
                </div>

                <button type="submit" class="btn btn-primary btn-sm mb-2">
                    <i class="fas fa-filter"></i> Apply Filters
                </button>

                <a href="@Url.Action("Incidents", "Director")" class="btn btn-secondary btn-sm mb-2 ml-2">
                    <i class="fas fa-times"></i> Clear Filters
                </a>
            }
        </div>
    </div>

    <!-- Incidents Table -->
    <div class="card shadow mb-4">
        <div class="card-header py-3 d-flex justify-content-between align-items-center">
            <h6 class="m-0 font-weight-bold text-primary">All Incidents</h6>
            <span class="badge badge-primary">@Model.Count() incidents found</span>
        </div>
        <div class="card-body">
            <div class="table-responsive">
                <table class="table table-bordered table-striped" id="dataTable" width="100%" cellspacing="0">
                    <thead class="thead-dark">
                        <tr>
                            <th>ID</th>
                            <th>Type</th>
                            <th>Description</th>
                            <th>Priority</th>
                            <th>Status</th>
                            <th>Report Date</th>
                            <th>Location</th>
                            <th>Actions</th>
                        </tr>
                    </thead>
                    <tbody>
                        @foreach (var item in Model)
                        {
                            <tr>
                                <td>INC-@item.IncidentReportId.ToString("D4")</td>
                                <td>@item.IncidentType</td>
                                <td class="description-cell" title="@item.Description">
                                    @if (!string.IsNullOrEmpty(item.Description))
                                    {
                                        @(item.Description.Length > 50 ? item.Description.Substring(0, 50) + "..." : item.Description)
                                    }
                                    else
                                    {
                                        <span class="text-muted">No description</span>
                                    }
                                </td>
                                <td>
                                    @GetPriorityBadge(item.Priority)
                                </td>
                                <td>
                                    @GetStatusBadge(item.Status)
                                </td>
                                <td>
                                    @if (item.ReportDate != DateTime.MinValue)
                                    {
                                        @item.ReportDate.ToString("MM/dd/yyyy HH:mm")
                                    }
                                    else
                                    {
                                        <span class="text-muted">Date not available</span>
                                    }
                                </td>
                                <td>@item.Location</td>
                                <td class="action-buttons">
                                    <a href="@Url.Action("IncidentDetails", "Director", new { id = item.IncidentReportId })"
                                       class="btn btn-info btn-sm" title="View Details and Update Feedback">
                                        <i class="fas fa-eye"></i> View
                                    </a>
                                </td>
                            </tr>
                        }
                    </tbody>
                </table>
            </div>
        </div>
    </div>
</div>

<!-- Helper functions for badges -->
@functions {
    private IHtmlString GetPriorityBadge(string priority)
    {
        string badgeClass = "badge badge-custom ";
        string displayText = priority ?? "Unknown";

        switch (priority?.ToLower())
        {
            case "critical":
                badgeClass += "badge-priority-critical";
                break;
            case "high":
                badgeClass += "badge-priority-high";
                break;
            case "medium":
                badgeClass += "badge-priority-medium";
                break;
            case "low":
                badgeClass += "badge-priority-low";
                break;
            default:
                badgeClass += "badge-secondary";
                displayText = "Not set";
                break;
        }
        return new HtmlString($"<span class='{badgeClass}'>{displayText}</span>");
    }

    private IHtmlString GetStatusBadge(string status)
    {
        string badgeClass = "badge badge-custom ";
        string displayText = status ?? "Unknown";

        switch (status?.ToLower())
        {
            case "resolved":
                badgeClass += "badge-status-resolved";
                break;
            case "in progress":
                badgeClass += "badge-status-inprogress";
                break;
            case "pending":
                badgeClass += "badge-status-pending";
                break;
            case "pending review":
                badgeClass += "badge-status-pendingreview";
                break;
            default:
                badgeClass += "badge-secondary";
                displayText = "Pending";
                break;
        }
        return new HtmlString($"<span class='{badgeClass}'>{displayText}</span>");
    }
}

@section Scripts {
    <script>
        $(document).ready(function () {
            // Initialize DataTable
            $('#dataTable').DataTable({
                "pageLength": 25,
                "order": [[5, "desc"]], // Sort by report date descending (column index 5)
                "columnDefs": [
                    { "orderable": false, "targets": [2, 7] }, // Make description and actions columns not sortable
                    { "width": "20%", "targets": 2 }, // Description column width
                    { "width": "10%", "targets": 7 } // Actions column width
                ],
                "language": {
                    "search": "Search incidents:",
                    "lengthMenu": "Show _MENU_ incidents per page",
                    "info": "Showing _START_ to _END_ of _TOTAL_ incidents",
                    "infoEmpty": "No incidents available",
                    "infoFiltered": "(filtered from _MAX_ total incidents)",
                    "paginate": {
                        "first": "First",
                        "last": "Last",
                        "next": "Next",
                        "previous": "Previous"
                    }
                },
                "responsive": true
            });

            // Set the selected values for filters
            $('#status').val('@ViewBag.StatusFilter');
            $('#priority').val('@ViewBag.PriorityFilter');
            $('#type').val('@ViewBag.TypeFilter');

            // Add tooltips for description hover
            $('[title]').tooltip({
                placement: 'top',
                trigger: 'hover'
            });

            // Add Font Awesome CSS if not already loaded
            if (!$('link[href*="font-awesome"]').length && !$('link[href*="fontawesome"]').length) {
                $('head').append('<link rel="stylesheet" href="https://cdnjs.cloudflare.com/ajax/libs/font-awesome/5.15.4/css/all.min.css">');
            }
        });
    </script>
}