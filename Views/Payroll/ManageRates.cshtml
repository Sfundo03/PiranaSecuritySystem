@model IEnumerable<PiranaSecuritySystem.Models.GuardRate>
@{
    ViewBag.Title = "Manage Guard Rates";
    Layout = "~/Views/Shared/_Layout.cshtml";
}

<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>PIRANA GUARDING - Manage Guard Rates</title>
    <link href="https://cdn.jsdelivr.net/npm/bootstrap@5.3.0/dist/css/bootstrap.min.css" rel="stylesheet">
    <link rel="stylesheet" href="https://cdnjs.cloudflare.com/ajax/libs/font-awesome/6.4.0/css/all.min.css">
    <link href="https://fonts.googleapis.com/css2?family=Roboto:wght@300;400;500;700&display=swap" rel="stylesheet">
    <style>
        :root {
            --primary-blue: #0069aa;
            --secondary-blue: #004a7c;
            --accent-orange: #f26522;
            --light-bg: #f8f9fa;
            --dark-text: #333333;
            --light-text: #6c757d;
            --border-color: #dee2e6;
        }

        body {
            background-color: var(--light-bg);
            min-height: 100vh;
            font-family: 'Roboto', sans-serif;
            padding: 20px 0;
            color: var(--dark-text);
        }

        .dashboard-container {
            max-width: 1400px;
            margin: 0 auto;
        }

        .dashboard-card {
            background: white;
            border-radius: 8px;
            box-shadow: 0 2px 15px rgba(0, 0, 0, 0.08);
            overflow: hidden;
            margin-bottom: 25px;
            border: 1px solid var(--border-color);
        }

        .card-header-custom {
            background: white;
            color: var(--primary-blue);
            padding: 20px;
            border-bottom: 2px solid var(--primary-blue);
        }

        .stats-card {
            border-radius: 8px;
            overflow: hidden;
            border: none;
            box-shadow: 0 2px 10px rgba(0, 0, 0, 0.08);
        }

        .btn-custom {
            background: var(--primary-blue);
            border: none;
            padding: 12px 20px;
            border-radius: 4px;
            font-weight: 500;
            transition: all 0.3s;
            color: white;
        }

            .btn-custom:hover {
                background: var(--secondary-blue);
                color: white;
            }

        .btn-outline-custom {
            background: transparent;
            border: 1px solid var(--primary-blue);
            color: var(--primary-blue);
            padding: 10px 20px;
            border-radius: 4px;
            font-weight: 500;
            transition: all 0.3s;
        }

            .btn-outline-custom:hover {
                background: var(--primary-blue);
                color: white;
            }

        .alert-custom {
            border-radius: 4px;
            border: none;
            box-shadow: 0 2px 10px rgba(0, 0, 0, 0.08);
        }

        h2, h4, h5 {
            color: var(--primary-blue);
        }

        .welcome-section {
            background: #e8f4ff;
            border-radius: 8px;
            padding: 20px;
            margin-bottom: 25px;
            border-left: 4px solid var(--primary-blue);
        }

        /* Table Styles */
        .table-container {
            overflow-x: auto;
        }

        .table-custom {
            border-collapse: separate;
            border-spacing: 0;
            width: 100%;
            border-radius: 8px;
            overflow: hidden;
            box-shadow: 0 2px 10px rgba(0, 0, 0, 0.08);
        }

            .table-custom th {
                background-color: var(--primary-blue);
                color: white;
                padding: 15px;
                font-weight: 500;
                text-align: left;
            }

            .table-custom td {
                padding: 15px;
                border-bottom: 1px solid var(--border-color);
                vertical-align: middle;
            }

            .table-custom tr:last-child td {
                border-bottom: none;
            }

            .table-custom tr:hover {
                background-color: #f8f9fa;
            }

        .status-badge {
            padding: 5px 10px;
            border-radius: 20px;
            font-size: 0.85rem;
            font-weight: 500;
        }

        .status-active {
            background-color: #d4edda;
            color: #155724;
        }

        .status-inactive {
            background-color: #f8d7da;
            color: #721c24;
        }

        .action-links {
            display: flex;
            gap: 15px;
            align-items: center;
        }

            .action-links a {
                color: var(--primary-blue);
                transition: all 0.2s;
                cursor: pointer;
                white-space: nowrap;
                padding: 5px 0;
            }

                .action-links a:hover {
                    color: var(--secondary-blue);
                    text-decoration: underline;
                }

        /* Action buttons */
        .action-buttons {
            display: flex;
            gap: 10px;
            margin-bottom: 20px;
        }

        /* Summary cards */
        .summary-cards {
            display: flex;
            gap: 15px;
            margin-bottom: 20px;
            flex-wrap: wrap;
        }

        .summary-card {
            background: white;
            border-radius: 8px;
            padding: 15px;
            box-shadow: 0 2px 10px rgba(0, 0, 0, 0.08);
            flex: 1;
            min-width: 200px;
            text-align: center;
        }

            .summary-card h5 {
                font-size: 1rem;
                margin-bottom: 10px;
                color: var(--primary-blue);
            }

            .summary-card .value {
                font-size: 1.5rem;
                font-weight: 600;
                color: var(--dark-text);
            }

        .rate-value {
            font-weight: 600;
            color: var(--primary-blue);
        }

        /* Loading spinner */
        .loading-spinner {
            display: none;
            width: 20px;
            height: 20px;
            border: 2px solid #f3f3f3;
            border-top: 2px solid var(--primary-blue);
            border-radius: 50%;
            animation: spin 1s linear infinite;
            margin-right: 5px;
        }

        @@keyframes spin {
            0% {
                transform: rotate(0deg);
            }

            100% {
                transform: rotate(360deg);
            }
        }

        /* Status toggle button styles */
        .btn-status-toggle {
            padding: 6px 12px;
            border-radius: 4px;
            font-size: 0.85rem;
            font-weight: 500;
            border: none;
            cursor: pointer;
            transition: all 0.3s;
            min-width: 100px;
            text-align: center;
        }

        .btn-status-active {
            background-color: #ffc107;
            color: #212529;
        }

            .btn-status-active:hover {
                background-color: #e0a800;
            }

        .btn-status-inactive {
            background-color: #28a745;
            color: white;
        }

            .btn-status-inactive:hover {
                background-color: #218838;
            }

        .btn-delete {
            background-color: #dc3545;
            color: white;
        }

            .btn-delete:hover {
                background-color: #c82333;
            }

        /* Responsive adjustments */
        @@media (max-width: 768px) {
            .summary-cards {
                flex-direction: column;
            }

            .action-buttons {
                flex-direction: column;
            }

            .btn-custom, .btn-outline-custom {
                width: 100%;
                margin-bottom: 10px;
            }

            .table-container {
                overflow-x: auto;
            }

            .table-custom {
                min-width: 600px;
            }

            .action-links {
                flex-direction: column;
                gap: 8px;
                align-items: flex-start;
            }

                .action-links a {
                    width: 100%;
                    text-align: center;
                    padding: 8px 0;
                }
        }
    </style>
</head>
<body>
    <div class="dashboard-container">
        <!-- Page Header -->
        <div class="d-flex justify-content-between align-items-center mb-4">
            <div>
                <h1 class="h3 mb-1"><i class="fas fa-money-bill-wave me-2"></i>Manage Guard Rates</h1>
                <p class="text-muted">View and manage hourly rates for security guards</p>
            </div>
        </div>

        <div class="dashboard-card">
            <div class="card-header-custom">
                <div class="d-flex justify-content-between align-items-center">
                    <h2 class="mb-0"><i class="fas fa-list me-2"></i>Guard Rate Records</h2>
                    <div>
                        <span class="badge bg-light text-dark">
                            <i class="fas fa-sync-alt me-1"></i>Last updated: @DateTime.Now.ToString("hh:mm tt")
                        </span>
                    </div>
                </div>
            </div>
            <div class="card-body">
                <!-- Alert Container -->
                <div id="alertContainer"></div>

                <!-- Action Buttons -->
                <div class="action-buttons">
                    @Html.ActionLink("Create New Rate", "CreateRate", null, new { @class = "btn btn-custom" })
                </div>

                <!-- Summary Cards -->
                <div class="summary-cards">
                    <div class="summary-card">
                        <h5><i class="fas fa-users me-2"></i>Total Rates</h5>
                        <div class="value">@Model.Count()</div>
                    </div>
                    <div class="summary-card">
                        <h5><i class="fas fa-check-circle me-2"></i>Active Rates</h5>
                        <div class="value">@Model.Count(r => r.IsActive)</div>
                    </div>
                    <div class="summary-card">
                        <h5><i class="fas fa-times-circle me-2"></i>Inactive Rates</h5>
                        <div class="value">@Model.Count(r => !r.IsActive)</div>
                    </div>
                    <div class="summary-card">
                        <h5><i class="fas fa-r me-2"></i>Avg. Rate (ZAR)</h5>
                        <div class="value">
                            @if (Model.Any())
                            {
                                @:R @Model.Average(r => r.Rate).ToString("F2")
                            }
                            else
                            {
                                <span>N/A</span>
                            }
                        </div>
                    </div>
                </div>

                <!-- Rates Table -->
                <div class="table-container">
                    <table class="table-custom">
                        <thead>
                            <tr>
                                <th>Guard Name</th>
                                <th>Hourly Rate</th>
                                <th>Effective Date</th>
                                <th>Status</th>
                                <th>Actions</th>
                            </tr>
                        </thead>
                        <tbody>
                            @foreach (var item in Model)
                            {
                                <tr id="rate-row-@item.GuardRateId">
                                    <td>@Html.DisplayFor(modelItem => item.Guard.FullName)</td>
                                    <td class="rate-value">R @item.Rate.ToString("F2")</td>
                                    <td>@item.EffectiveDate.ToString("yyyy-MM-dd")</td>
                                    <td id="status-@item.GuardRateId">
                                        @if (item.IsActive)
                                        {
                                            <span class="status-badge status-active">Active</span>
                                        }
                                        else
                                        {
                                            <span class="status-badge status-inactive">Inactive</span>
                                        }
                                    </td>
                                    <td>
                                        <div class="action-links">
                                            @if (item.IsActive)
                                            {
                                                <a class="btn-status-toggle deactivate-rate" data-id="@item.GuardRateId">
                                                    <span class="loading-spinner"></span>Deactivate
                                                </a>
                                            }
                                            else
                                            {
                                                <a class="btn-status-toggle activate-rate" data-id="@item.GuardRateId">
                                                    <span class="loading-spinner"></span>Activate
                                                </a>
                                            }

                                            <a class="btn-status-toggle btn-delete delete-rate" data-id="@item.GuardRateId" data-name="@item.Guard.FullName">
                                                <span class="loading-spinner"></span>Delete
                                            </a>
                                        </div>
                                    </td>
                                </tr>
                            }
                        </tbody>
                    </table>
                </div>

                @if (!Model.Any())
                {
                    <div class="text-center py-4">
                        <i class="fas fa-money-bill-wave fa-3x text-muted mb-3"></i>
                        <h4 class="text-muted">No guard rates found</h4>
                        <p>Create your first guard rate to get started</p>
                        @Html.ActionLink("Create New Rate", "CreateRate", null, new { @class = "btn btn-custom mt-2" })
                    </div>
                }
            </div>
        </div>
    </div>

    <script src="https://cdn.jsdelivr.net/npm/bootstrap@5.3.0/dist/js/bootstrap.bundle.min.js"></script>
    <script>
        document.addEventListener('DOMContentLoaded', function() {
            console.log("Manage guard rates page loaded");

            // Show alert function
            function showAlert(message, type) {
                const alertContainer = document.getElementById('alertContainer');
                const alertHtml = `
                    <div class="alert alert-${type} alert-dismissible fade show alert-custom" role="alert">
                        ${message}
                        <button type="button" class="btn-close" data-bs-dismiss="alert" aria-label="Close"></button>
                    </div>
                `;
                alertContainer.innerHTML = alertHtml;

                // Auto-remove alert after 5 seconds
                setTimeout(() => {
                    const alert = alertContainer.querySelector('.alert');
                    if (alert) {
                        alert.remove();
                    }
                }, 5000);
            }

            // Toggle loading spinner
            function toggleLoading(element, show) {
                const spinner = element.querySelector('.loading-spinner');
                if (show) {
                    spinner.style.display = 'inline-block';
                    element.style.pointerEvents = 'none';
                    element.style.opacity = '0.6';
                } else {
                    spinner.style.display = 'none';
                    element.style.pointerEvents = 'auto';
                    element.style.opacity = '1';
                }
            }

            // Update action buttons to maintain consistent layout
            function updateActionButtons(rateId, isActive) {
                const actionCell = document.querySelector(`#rate-row-${rateId} td:last-child .action-links`);

                if (isActive) {
                    actionCell.innerHTML = `
                        <a class="btn-status-toggle deactivate-rate" data-id="${rateId}">
                            <span class="loading-spinner"></span>Deactivate
                        </a>
                        <a class="btn-status-toggle btn-delete delete-rate" data-id="${rateId}" data-name="${actionCell.querySelector('.delete-rate').getAttribute('data-name')}">
                            <span class="loading-spinner"></span>Delete
                        </a>
                    `;
                } else {
                    actionCell.innerHTML = `
                        <a class="btn-status-toggle activate-rate" data-id="${rateId}">
                            <span class="loading-spinner"></span>Activate
                        </a>
                        <a class="btn-status-toggle btn-delete delete-rate" data-id="${rateId}" data-name="${actionCell.querySelector('.delete-rate').getAttribute('data-name')}">
                            <span class="loading-spinner"></span>Delete
                        </a>
                    `;
                }

                // Re-attach event listeners
                attachEventListeners();
            }

            // Attach event listeners to buttons
            function attachEventListeners() {
                // Deactivate rate
                document.querySelectorAll('.deactivate-rate').forEach(link => {
                    link.addEventListener('click', function() {
                        const rateId = this.getAttribute('data-id');
                        const linkElement = this;

                        if (confirm('Are you sure you want to deactivate this rate?')) {
                            toggleLoading(linkElement, true);

                            fetch('@Url.Action("DeactivateRate", "Payroll")/' + rateId, {
                                method: 'POST',
                                headers: {
                                    'Content-Type': 'application/json',
                                    'X-Requested-With': 'XMLHttpRequest'
                                }
                            })
                            .then(response => response.json())
                            .then(data => {
                                toggleLoading(linkElement, false);

                                if (data.success) {
                                    // Update status badge
                                    const statusElement = document.getElementById('status-' + rateId);
                                    statusElement.innerHTML = '<span class="status-badge status-inactive">Inactive</span>';

                                    // Update action buttons
                                    updateActionButtons(rateId, false);

                                    showAlert(data.message, 'success');

                                    // Update summary counts
                                    updateSummaryCounts();
                                } else {
                                    showAlert(data.message, 'danger');
                                }
                            })
                            .catch(error => {
                                toggleLoading(linkElement, false);
                                showAlert('Error deactivating rate: ' + error, 'danger');
                            });
                        }
                    });
                });

                // Activate rate
                document.querySelectorAll('.activate-rate').forEach(link => {
                    link.addEventListener('click', function() {
                        const rateId = this.getAttribute('data-id');
                        const linkElement = this;

                        if (confirm('Are you sure you want to activate this rate?')) {
                            toggleLoading(linkElement, true);

                            fetch('@Url.Action("ActivateRate", "Payroll")/' + rateId, {
                                method: 'POST',
                                headers: {
                                    'Content-Type': 'application/json',
                                    'X-Requested-With': 'XMLHttpRequest'
                                }
                            })
                            .then(response => response.json())
                            .then(data => {
                                toggleLoading(linkElement, false);

                                if (data.success) {
                                    // Update status badge
                                    const statusElement = document.getElementById('status-' + rateId);
                                    statusElement.innerHTML = '<span class="status-badge status-active">Active</span>';

                                    // Update action buttons
                                    updateActionButtons(rateId, true);

                                    showAlert(data.message, 'success');

                                    // Update summary counts
                                    updateSummaryCounts();
                                } else {
                                    showAlert(data.message, 'danger');
                                }
                            })
                            .catch(error => {
                                toggleLoading(linkElement, false);
                                showAlert('Error activating rate: ' + error, 'danger');
                            });
                        }
                    });
                });

                // Delete rate
                document.querySelectorAll('.delete-rate').forEach(link => {
                    link.addEventListener('click', function() {
                        const rateId = this.getAttribute('data-id');
                        const guardName = this.getAttribute('data-name');
                        const linkElement = this;

                        if (confirm(`Are you sure you want to delete the rate for ${guardName}? This action cannot be undone.`)) {
                            toggleLoading(linkElement, true);

                            fetch('@Url.Action("DeleteRate", "Payroll")/' + rateId, {
                                method: 'POST',
                                headers: {
                                    'Content-Type': 'application/json',
                                    'X-Requested-With': 'XMLHttpRequest'
                                }
                            })
                            .then(response => response.json())
                            .then(data => {
                                toggleLoading(linkElement, false);

                                if (data.success) {
                                    // Remove the row from the table
                                    const row = document.getElementById('rate-row-' + rateId);
                                    row.remove();

                                    showAlert(data.message, 'success');

                                    // Update summary counts
                                    updateSummaryCounts();

                                    // Show empty state if no rates left
                                    if (document.querySelectorAll('.table-custom tbody tr').length === 0) {
                                        location.reload(); // Reload to show empty state
                                    }
                                } else {
                                    showAlert(data.message, 'danger');
                                }
                            })
                            .catch(error => {
                                toggleLoading(linkElement, false);
                                showAlert('Error deleting rate: ' + error, 'danger');
                            });
                        }
                    });
                });
            }

            // Initial attachment of event listeners
            attachEventListeners();

            // Update summary counts (simplified - in real app you might want to recalculate from server)
            function updateSummaryCounts() {
                // This is a simplified version - in a real application, you might want to
                // make an AJAX call to get updated counts or recalculate from the current table data
                console.log("Summary counts would be updated here");

                // Simple client-side update for demo purposes
                const totalRates = document.querySelectorAll('.table-custom tbody tr').length;
                const activeRates = document.querySelectorAll('.status-active').length;
                const inactiveRates = totalRates - activeRates;

                // Update the summary cards if they exist
                const totalElement = document.querySelector('.summary-cards .summary-card:nth-child(1) .value');
                const activeElement = document.querySelector('.summary-cards .summary-card:nth-child(2) .value');
                const inactiveElement = document.querySelector('.summary-cards .summary-card:nth-child(3) .value');

                if (totalElement) totalElement.textContent = totalRates;
                if (activeElement) activeElement.textContent = activeRates;
                if (inactiveElement) inactiveElement.textContent = inactiveRates;
            }

            // Auto-refresh page every 5 minutes to get updated data
            setInterval(function() {
                console.log("Refreshing guard rates data...");
                window.location.reload();
            }, 300000); // 5 minutes
        });
    </script>
</body>
</html>