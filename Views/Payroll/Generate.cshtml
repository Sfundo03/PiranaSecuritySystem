@model PiranaSecuritySystem.Models.Payroll
@{
    ViewBag.Title = "Generate Payroll";
    Layout = "~/Views/Shared/_Layout.cshtml";
}

<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>PIRANA GUARDING - Generate Payroll</title>
    <link href="https://cdn.jsdelivr.net/npm/bootstrap@5.3.0/dist/css/bootstrap.min.css" rel="stylesheet">
    <link rel="stylesheet" href="https://cdnjs.cloudflare.com/ajax/libs/font-awesome/6.4.0/css/all.min.css">
    <link href="https://fonts.googleapis.com/css2?family=Roboto:wght@300;400;500;700&display=swap" rel="stylesheet">
    <style>
        :root {
            --primary-blue: #0069aa;
            --secondary-blue: #004a7c;
            --accent-orange: #f26522;
            --light-bg: #f8f9fa;
            --dark-text: #333333;
            --light-text: #6c757d;
            --border-color: #dee2e6;
        }

        body {
            background-color: var(--light-bg);
            min-height: 100vh;
            font-family: 'Roboto', sans-serif;
            padding: 20px 0;
            color: var(--dark-text);
        }

        .dashboard-container {
            max-width: 800px;
            margin: 0 auto;
        }

        .dashboard-card {
            background: white;
            border-radius: 8px;
            box-shadow: 0 2px 15px rgba(0, 0, 0, 0.08);
            overflow: hidden;
            margin-bottom: 25px;
            border: 1px solid var(--border-color);
        }

        .card-header-custom {
            background: white;
            color: var(--primary-blue);
            padding: 20px;
            border-bottom: 2px solid var(--primary-blue);
        }

        .btn-custom {
            background: var(--primary-blue);
            border: none;
            padding: 12px 20px;
            border-radius: 4px;
            font-weight: 500;
            transition: all 0.3s;
            color: white;
        }

            .btn-custom:hover {
                background: var(--secondary-blue);
                color: white;
            }

        .btn-outline-custom {
            background: transparent;
            border: 1px solid var(--primary-blue);
            color: var(--primary-blue);
            padding: 10px 20px;
            border-radius: 4px;
            font-weight: 500;
            transition: all 0.3s;
        }

            .btn-outline-custom:hover {
                background: var(--primary-blue);
                color: white;
            }

        h2, h4, h5 {
            color: var(--primary-blue);
        }

        .form-container {
            padding: 25px;
        }

        .form-group {
            margin-bottom: 20px;
        }

        .control-label {
            font-weight: 500;
            margin-bottom: 8px;
            color: var(--dark-text);
        }

        .form-control {
            border: 1px solid var(--border-color);
            border-radius: 4px;
            padding: 10px 15px;
            transition: all 0.3s;
        }

            .form-control:focus {
                border-color: var(--primary-blue);
                box-shadow: 0 0 0 0.2rem rgba(0, 105, 170, 0.25);
            }

        .text-danger {
            color: #dc3545;
            font-size: 0.875rem;
            margin-top: 5px;
        }

        .back-link {
            display: inline-block;
            margin-top: 20px;
            color: var(--primary-blue);
            text-decoration: none;
            font-weight: 500;
            transition: all 0.2s;
        }

            .back-link:hover {
                color: var(--secondary-blue);
                text-decoration: underline;
            }

        .info-box {
            background-color: #e8f4ff;
            border-left: 4px solid var(--primary-blue);
            padding: 15px;
            border-radius: 4px;
            margin-bottom: 20px;
        }

            .info-box i {
                color: var(--primary-blue);
                margin-right: 10px;
            }

        .alert-existing {
            background-color: #fff3cd;
            border-left: 4px solid #ffc107;
            padding: 15px;
            border-radius: 4px;
            margin-bottom: 20px;
            display: none;
        }

        .alert-success-custom {
            background-color: #d4edda;
            border-left: 4px solid #28a745;
            padding: 15px;
            border-radius: 4px;
            margin-bottom: 20px;
            display: none;
        }

        .alert-error-custom {
            background-color: #f8d7da;
            border-left: 4px solid #dc3545;
            padding: 15px;
            border-radius: 4px;
            margin-bottom: 20px;
        }

        .currency-note {
            background-color: #f8f9fa;
            border-left: 4px solid var(--accent-orange);
            padding: 10px 15px;
            border-radius: 4px;
            margin-top: 5px;
            font-size: 0.875rem;
            color: var(--light-text);
        }

        /* Responsive adjustments */
        @@media (max-width: 768px) {
            .form-container {
                padding: 15px;
            }

            .btn-custom {
                width: 100%;
            }
        }
    </style>
</head>
<body>
    <div class="dashboard-container">
        <!-- Page Header -->
        <div class="d-flex justify-content-between align-items-center mb-4">
            <div>
                <h1 class="h3 mb-1"><i class="fas fa-calculator me-2"></i>Generate Payroll</h1>
                <p class="text-muted">Create payroll records for security guards</p>
            </div>
        </div>

        <!-- Display error messages from server -->
        @if (!ViewData.ModelState.IsValid)
        {
            <div class="alert-error-custom">
                <i class="fas fa-exclamation-circle"></i>
                @Html.ValidationSummary(false, "", new { @class = "text-danger mb-0" })
            </div>
        }

        <div class="dashboard-card">
            <div class="card-header-custom">
                <div class="d-flex justify-content-between align-items-center">
                    <h2 class="mb-0"><i class="fas fa-plus-circle me-2"></i>New Payroll</h2>
                </div>
            </div>

            <div class="form-container">
                <!-- Information Box -->
                <div class="info-box">
                    <i class="fas fa-info-circle"></i>
                    <span>Select a guard and pay period to generate payroll. The system will calculate hours worked and apply the appropriate rates. <strong>Note:</strong> Only one payroll per guard per month is allowed.</span>
                </div>

                <!-- Currency Note -->
                <div class="currency-note">
                    <i class="fas fa-money-bill-wave"></i>
                    <span>All amounts are calculated and displayed in South African Rand (ZAR).</span>
                </div>

                <!-- Existing Payroll Alert -->
                <div id="existingPayrollAlert" class="alert-existing">
                    <i class="fas fa-exclamation-triangle"></i>
                    <span id="existingPayrollMessage"></span>
                    <a href="#" id="existingPayrollLink" class="btn btn-outline-warning btn-sm ms-2">View Existing Payroll</a>
                </div>

                <div id="noExistingPayrollAlert" class="alert-success-custom">
                    <i class="fas fa-check-circle"></i>
                    <span>No existing payroll found for this guard and month. You can proceed with generation.</span>
                </div>

                @using (Html.BeginForm())
                {
                    @Html.AntiForgeryToken()

                    <div class="form-group">
                        @Html.Label("Guard", htmlAttributes: new { @class = "control-label" })
                        <div>
                            @Html.DropDownList("guardId", null, "Select Guard", htmlAttributes: new { @class = "form-control", required = "required", id = "guardId" })
                            @Html.ValidationMessage("guardId", "", new { @class = "text-danger" })
                        </div>
                    </div>

                    <div class="row">
                        <div class="col-md-6">
                            <div class="form-group">
                                @Html.Label("Pay Period Start", htmlAttributes: new { @class = "control-label" })
                                <div>
                                    @Html.Editor("payPeriodStart", new { htmlAttributes = new { @class = "form-control", type = "date", required = "required", id = "payPeriodStart" } })
                                    @Html.ValidationMessage("payPeriodStart", "", new { @class = "text-danger" })
                                </div>
                            </div>
                        </div>
                        <div class="col-md-6">
                            <div class="form-group">
                                @Html.Label("Pay Period End", htmlAttributes: new { @class = "control-label" })
                                <div>
                                    @Html.Editor("payPeriodEnd", new { htmlAttributes = new { @class = "form-control", type = "date", required = "required", id = "payPeriodEnd" } })
                                    @Html.ValidationMessage("payPeriodEnd", "", new { @class = "text-danger" })
                                </div>
                            </div>
                        </div>
                    </div>

                    <div class="form-group">
                        <button type="button" id="checkExistingBtn" class="btn btn-outline-custom me-2">
                            <i class="fas fa-search me-1"></i>Check for Existing Payroll
                        </button>
                        <input type="submit" value="Generate Payroll" class="btn btn-custom" id="generateBtn" />
                    </div>
                }

                <div>
                    <a href="@Url.Action("Index")" class="back-link">
                        <i class="fas fa-arrow-left me-1"></i>Back to Payroll List
                    </a>
                </div>
            </div>
        </div>
    </div>

    <script src="https://cdn.jsdelivr.net/npm/bootstrap@5.3.0/dist/js/bootstrap.bundle.min.js"></script>
    <script>
        document.addEventListener('DOMContentLoaded', function () {
            console.log("Generate payroll page loaded");

            // Set default dates for pay period
            const today = new Date();
            const startDate = new Date(today);
            startDate.setDate(today.getDate() - 14); // Default to 2 weeks ago

            document.getElementById('payPeriodStart').valueAsDate = startDate;
            document.getElementById('payPeriodEnd').valueAsDate = today;

            // Elements
            const guardSelect = document.getElementById('guardId');
            const startDateInput = document.getElementById('payPeriodStart');
            const endDateInput = document.getElementById('payPeriodEnd');
            const checkExistingBtn = document.getElementById('checkExistingBtn');
            const generateBtn = document.getElementById('generateBtn');
            const existingAlert = document.getElementById('existingPayrollAlert');
            const noExistingAlert = document.getElementById('noExistingPayrollAlert');
            const existingMessage = document.getElementById('existingPayrollMessage');
            const existingLink = document.getElementById('existingPayrollLink');

            // Check for existing payroll
            function checkExistingPayroll() {
                const guardId = guardSelect.value;
                const startDate = startDateInput.value;

                if (!guardId || guardId === '' || !startDate) {
                    alert('Please select both a guard and a start date');
                    return;
                }

                // Show loading state
                checkExistingBtn.innerHTML = '<i class="fas fa-spinner fa-spin me-1"></i>Checking...';
                checkExistingBtn.disabled = true;

                fetch(`/Payroll/CheckExisting?guardId=${guardId}&payPeriodStart=${startDate}`)
                    .then(response => {
                        if (!response.ok) {
                            throw new Error('Network response was not ok');
                        }
                        return response.json();
                    })
                    .then(data => {
                        if (data.error) {
                            console.error('Server error:', data.error);
                            alert('Error checking for existing payroll: ' + data.error);
                            return;
                        }

                        if (data.exists) {
                            existingMessage.textContent = data.message;
                            existingLink.href = `/Payroll/Details/${data.payrollId}`;
                            existingAlert.style.display = 'block';
                            noExistingAlert.style.display = 'none';
                            generateBtn.disabled = true;
                        } else {
                            existingAlert.style.display = 'none';
                            noExistingAlert.style.display = 'block';
                            generateBtn.disabled = false;
                        }
                    })
                    .catch(error => {
                        console.error('Error checking existing payroll:', error);
                        alert('Error checking for existing payroll. Please try again.');
                    })
                    .finally(() => {
                        checkExistingBtn.innerHTML = '<i class="fas fa-search me-1"></i>Check for Existing Payroll';
                        checkExistingBtn.disabled = false;
                    });
            }

            // Event listeners
            checkExistingBtn.addEventListener('click', checkExistingPayroll);

            // Auto-check when dates change
            startDateInput.addEventListener('change', function () {
                if (guardSelect.value && guardSelect.value !== '') {
                    checkExistingPayroll();
                }
            });

            guardSelect.addEventListener('change', function () {
                if (startDateInput.value) {
                    checkExistingPayroll();
                }
            });

            // Form validation
            const form = document.querySelector('form');
            form.addEventListener('submit', function (e) {
                const guardId = guardSelect.value;
                const startDate = startDateInput.value;
                const endDate = endDateInput.value;

                if (!guardId || guardId === '') {
                    e.preventDefault();
                    alert('Please select a guard');
                    return false;
                }

                if (!startDate || !endDate) {
                    e.preventDefault();
                    alert('Please select both start and end dates for the pay period');
                    return false;
                }

                if (new Date(startDate) > new Date(endDate)) {
                    e.preventDefault();
                    alert('Pay period start date cannot be after end date');
                    return false;
                }

                // Check if pay period is in the same month
                const start = new Date(startDate);
                const end = new Date(endDate);
                if (start.getMonth() !== end.getMonth() || start.getFullYear() !== end.getFullYear()) {
                    e.preventDefault();
                    alert('Pay period must be within the same month');
                    return false;
                }

                // Disable button to prevent double submission
                generateBtn.disabled = true;
                generateBtn.value = 'Generating...';
            });

            // Initial check if values are already selected
            if (guardSelect.value && guardSelect.value !== '' && startDateInput.value) {
                checkExistingPayroll();
            }
        });
    </script>
</body>
</html>